
package net.felsing.client_cert.ejbca;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 3.1.2
 * 2015-12-27T19:07:25.458+01:00
 * Generated source version: 3.1.2
 * 
 */
public final class EjbcaWS_EjbcaWSPort_Client {

    private static final QName SERVICE_NAME = new QName("http://ws.protocol.core.ejbca.org/", "EjbcaWSService");

    private EjbcaWS_EjbcaWSPort_Client() {
    }

    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = EjbcaWSService.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        EjbcaWSService ss = new EjbcaWSService(wsdlURL, SERVICE_NAME);
        EjbcaWS port = ss.getEjbcaWSPort();  
        
        {
        System.out.println("Invoking getHardTokenData...");
        java.lang.String _getHardTokenData_arg0 = "";
        boolean _getHardTokenData_arg1 = false;
        boolean _getHardTokenData_arg2 = false;
        try {
            net.felsing.client_cert.ejbca.HardTokenDataWS _getHardTokenData__return = port.getHardTokenData(_getHardTokenData_arg0, _getHardTokenData_arg1, _getHardTokenData_arg2);
            System.out.println("getHardTokenData.result=" + _getHardTokenData__return);

        } catch (NotFoundException_Exception e) { 
            System.out.println("Expected exception: NotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (HardTokenDoesntExistsException_Exception e) { 
            System.out.println("Expected exception: HardTokenDoesntExistsException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalRequestExpiredException_Exception e) { 
            System.out.println("Expected exception: ApprovalRequestExpiredException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalRequestExecutionException_Exception e) { 
            System.out.println("Expected exception: ApprovalRequestExecutionException has occurred.");
            System.out.println(e.toString());
        } catch (WaitingForApprovalException_Exception e) { 
            System.out.println("Expected exception: WaitingForApprovalException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking caCertResponse...");
        java.lang.String _caCertResponse_arg0 = "";
        byte[] _caCertResponse_arg1 = new byte[0];
        java.util.List<byte[]> _caCertResponse_arg2 = null;
        java.lang.String _caCertResponse_arg3 = "";
        try {
            port.caCertResponse(_caCertResponse_arg0, _caCertResponse_arg1, _caCertResponse_arg2, _caCertResponse_arg3);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (CesecoreException_Exception e) { 
            System.out.println("Expected exception: CesecoreException has occurred.");
            System.out.println(e.toString());
        } catch (WaitingForApprovalException_Exception e) { 
            System.out.println("Expected exception: WaitingForApprovalException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking createCRL...");
        java.lang.String _createCRL_arg0 = "";
        try {
            port.createCRL(_createCRL_arg0);

        } catch (CAOfflineException_Exception e) { 
            System.out.println("Expected exception: CAOfflineException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalRequestExpiredException_Exception e) { 
            System.out.println("Expected exception: ApprovalRequestExpiredException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (CryptoTokenOfflineException_Exception e) { 
            System.out.println("Expected exception: CryptoTokenOfflineException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getAvailableCAsInProfile...");
        int _getAvailableCAsInProfile_arg0 = 0;
        try {
            java.util.List<net.felsing.client_cert.ejbca.NameAndId> _getAvailableCAsInProfile__return = port.getAvailableCAsInProfile(_getAvailableCAsInProfile_arg0);
            System.out.println("getAvailableCAsInProfile.result=" + _getAvailableCAsInProfile__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking pkcs12Req...");
        java.lang.String _pkcs12Req_arg0 = "";
        java.lang.String _pkcs12Req_arg1 = "";
        java.lang.String _pkcs12Req_arg2 = "";
        java.lang.String _pkcs12Req_arg3 = "";
        java.lang.String _pkcs12Req_arg4 = "";
        try {
            net.felsing.client_cert.ejbca.KeyStore _pkcs12Req__return = port.pkcs12Req(_pkcs12Req_arg0, _pkcs12Req_arg1, _pkcs12Req_arg2, _pkcs12Req_arg3, _pkcs12Req_arg4);
            System.out.println("pkcs12Req.result=" + _pkcs12Req__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (NotFoundException_Exception e) { 
            System.out.println("Expected exception: NotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking crmfRequest...");
        java.lang.String _crmfRequest_arg0 = "";
        java.lang.String _crmfRequest_arg1 = "";
        java.lang.String _crmfRequest_arg2 = "";
        java.lang.String _crmfRequest_arg3 = "";
        java.lang.String _crmfRequest_arg4 = "";
        try {
            net.felsing.client_cert.ejbca.CertificateResponse _crmfRequest__return = port.crmfRequest(_crmfRequest_arg0, _crmfRequest_arg1, _crmfRequest_arg2, _crmfRequest_arg3, _crmfRequest_arg4);
            System.out.println("crmfRequest.result=" + _crmfRequest__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (NotFoundException_Exception e) { 
            System.out.println("Expected exception: NotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (CesecoreException_Exception e) { 
            System.out.println("Expected exception: CesecoreException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking findUser...");
        net.felsing.client_cert.ejbca.UserMatch _findUser_arg0 = new net.felsing.client_cert.ejbca.UserMatch();
        try {
            java.util.List<net.felsing.client_cert.ejbca.UserDataVOWS> _findUser__return = port.findUser(_findUser_arg0);
            System.out.println("findUser.result=" + _findUser__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (EndEntityProfileNotFoundException_Exception e) { 
            System.out.println("Expected exception: EndEntityProfileNotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (IllegalQueryException_Exception e) { 
            System.out.println("Expected exception: IllegalQueryException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking keyRecover...");
        java.lang.String _keyRecover_arg0 = "";
        java.lang.String _keyRecover_arg1 = "";
        java.lang.String _keyRecover_arg2 = "";
        try {
            port.keyRecover(_keyRecover_arg0, _keyRecover_arg1, _keyRecover_arg2);

        } catch (NotFoundException_Exception e) { 
            System.out.println("Expected exception: NotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (WaitingForApprovalException_Exception e) { 
            System.out.println("Expected exception: WaitingForApprovalException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking genTokenCertificates...");
        net.felsing.client_cert.ejbca.UserDataVOWS _genTokenCertificates_arg0 = new net.felsing.client_cert.ejbca.UserDataVOWS();
        java.util.List<net.felsing.client_cert.ejbca.TokenCertificateRequestWS> _genTokenCertificates_arg1 = null;
        net.felsing.client_cert.ejbca.HardTokenDataWS _genTokenCertificates_arg2 = new net.felsing.client_cert.ejbca.HardTokenDataWS();
        boolean _genTokenCertificates_arg3 = false;
        boolean _genTokenCertificates_arg4 = false;
        try {
            java.util.List<net.felsing.client_cert.ejbca.TokenCertificateResponseWS> _genTokenCertificates__return = port.genTokenCertificates(_genTokenCertificates_arg0, _genTokenCertificates_arg1, _genTokenCertificates_arg2, _genTokenCertificates_arg3, _genTokenCertificates_arg4);
            System.out.println("genTokenCertificates.result=" + _genTokenCertificates__return);

        } catch (ApprovalRequestExpiredException_Exception e) { 
            System.out.println("Expected exception: ApprovalRequestExpiredException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        } catch (HardTokenExistsException_Exception e) { 
            System.out.println("Expected exception: HardTokenExistsException has occurred.");
            System.out.println(e.toString());
        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (UserDoesntFullfillEndEntityProfile_Exception e) { 
            System.out.println("Expected exception: UserDoesntFullfillEndEntityProfile has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalRequestExecutionException_Exception e) { 
            System.out.println("Expected exception: ApprovalRequestExecutionException has occurred.");
            System.out.println(e.toString());
        } catch (WaitingForApprovalException_Exception e) { 
            System.out.println("Expected exception: WaitingForApprovalException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking caRenewCertRequest...");
        java.lang.String _caRenewCertRequest_arg0 = "";
        java.util.List<byte[]> _caRenewCertRequest_arg1 = null;
        boolean _caRenewCertRequest_arg2 = false;
        boolean _caRenewCertRequest_arg3 = false;
        boolean _caRenewCertRequest_arg4 = false;
        java.lang.String _caRenewCertRequest_arg5 = "";
        try {
            byte[] _caRenewCertRequest__return = port.caRenewCertRequest(_caRenewCertRequest_arg0, _caRenewCertRequest_arg1, _caRenewCertRequest_arg2, _caRenewCertRequest_arg3, _caRenewCertRequest_arg4, _caRenewCertRequest_arg5);
            System.out.println("caRenewCertRequest.result=" + _caRenewCertRequest__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        } catch (WaitingForApprovalException_Exception e) { 
            System.out.println("Expected exception: WaitingForApprovalException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking fetchUserData...");
        java.util.List<java.lang.String> _fetchUserData_arg0 = null;
        java.lang.String _fetchUserData_arg1 = "";
        try {
            java.util.List<net.felsing.client_cert.ejbca.UserDataSourceVOWS> _fetchUserData__return = port.fetchUserData(_fetchUserData_arg0, _fetchUserData_arg1);
            System.out.println("fetchUserData.result=" + _fetchUserData__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (UserDataSourceException_Exception e) { 
            System.out.println("Expected exception: UserDataSourceException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking pkcs10Request...");
        java.lang.String _pkcs10Request_arg0 = "";
        java.lang.String _pkcs10Request_arg1 = "";
        java.lang.String _pkcs10Request_arg2 = "";
        java.lang.String _pkcs10Request_arg3 = "";
        java.lang.String _pkcs10Request_arg4 = "";
        try {
            net.felsing.client_cert.ejbca.CertificateResponse _pkcs10Request__return = port.pkcs10Request(_pkcs10Request_arg0, _pkcs10Request_arg1, _pkcs10Request_arg2, _pkcs10Request_arg3, _pkcs10Request_arg4);
            System.out.println("pkcs10Request.result=" + _pkcs10Request__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (NotFoundException_Exception e) { 
            System.out.println("Expected exception: NotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (CesecoreException_Exception e) { 
            System.out.println("Expected exception: CesecoreException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking revokeCertBackdated...");
        java.lang.String _revokeCertBackdated_arg0 = "";
        java.lang.String _revokeCertBackdated_arg1 = "";
        int _revokeCertBackdated_arg2 = 0;
        java.lang.String _revokeCertBackdated_arg3 = "";
        try {
            port.revokeCertBackdated(_revokeCertBackdated_arg0, _revokeCertBackdated_arg1, _revokeCertBackdated_arg2, _revokeCertBackdated_arg3);

        } catch (RevokeBackDateNotAllowedForProfileException_Exception e) { 
            System.out.println("Expected exception: RevokeBackDateNotAllowedForProfileException has occurred.");
            System.out.println(e.toString());
        } catch (AlreadyRevokedException_Exception e) { 
            System.out.println("Expected exception: AlreadyRevokedException has occurred.");
            System.out.println(e.toString());
        } catch (NotFoundException_Exception e) { 
            System.out.println("Expected exception: NotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (DateNotValidException_Exception e) { 
            System.out.println("Expected exception: DateNotValidException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (WaitingForApprovalException_Exception e) { 
            System.out.println("Expected exception: WaitingForApprovalException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking checkRevokationStatus...");
        java.lang.String _checkRevokationStatus_arg0 = "";
        java.lang.String _checkRevokationStatus_arg1 = "";
        try {
            net.felsing.client_cert.ejbca.RevokeStatus _checkRevokationStatus__return = port.checkRevokationStatus(_checkRevokationStatus_arg0, _checkRevokationStatus_arg1);
            System.out.println("checkRevokationStatus.result=" + _checkRevokationStatus__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getHardTokenDatas...");
        java.lang.String _getHardTokenDatas_arg0 = "";
        boolean _getHardTokenDatas_arg1 = false;
        boolean _getHardTokenDatas_arg2 = false;
        try {
            java.util.List<net.felsing.client_cert.ejbca.HardTokenDataWS> _getHardTokenDatas__return = port.getHardTokenDatas(_getHardTokenDatas_arg0, _getHardTokenDatas_arg1, _getHardTokenDatas_arg2);
            System.out.println("getHardTokenDatas.result=" + _getHardTokenDatas__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking revokeToken...");
        java.lang.String _revokeToken_arg0 = "";
        int _revokeToken_arg1 = 0;
        try {
            port.revokeToken(_revokeToken_arg0, _revokeToken_arg1);

        } catch (AlreadyRevokedException_Exception e) { 
            System.out.println("Expected exception: AlreadyRevokedException has occurred.");
            System.out.println(e.toString());
        } catch (NotFoundException_Exception e) { 
            System.out.println("Expected exception: NotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (WaitingForApprovalException_Exception e) { 
            System.out.println("Expected exception: WaitingForApprovalException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking softTokenRequest...");
        net.felsing.client_cert.ejbca.UserDataVOWS _softTokenRequest_arg0 = new net.felsing.client_cert.ejbca.UserDataVOWS();
        java.lang.String _softTokenRequest_arg1 = "";
        java.lang.String _softTokenRequest_arg2 = "";
        java.lang.String _softTokenRequest_arg3 = "";
        try {
            net.felsing.client_cert.ejbca.KeyStore _softTokenRequest__return = port.softTokenRequest(_softTokenRequest_arg0, _softTokenRequest_arg1, _softTokenRequest_arg2, _softTokenRequest_arg3);
            System.out.println("softTokenRequest.result=" + _softTokenRequest__return);

        } catch (NotFoundException_Exception e) { 
            System.out.println("Expected exception: NotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        } catch (UserDoesntFullfillEndEntityProfile_Exception e) { 
            System.out.println("Expected exception: UserDoesntFullfillEndEntityProfile has occurred.");
            System.out.println(e.toString());
        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (WaitingForApprovalException_Exception e) { 
            System.out.println("Expected exception: WaitingForApprovalException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getLatestCRL...");
        java.lang.String _getLatestCRL_arg0 = "";
        boolean _getLatestCRL_arg1 = false;
        try {
            byte[] _getLatestCRL__return = port.getLatestCRL(_getLatestCRL_arg0, _getLatestCRL_arg1);
            System.out.println("getLatestCRL.result=" + _getLatestCRL__return);

        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking keyRecoverNewest...");
        java.lang.String _keyRecoverNewest_arg0 = "";
        try {
            port.keyRecoverNewest(_keyRecoverNewest_arg0);

        } catch (NotFoundException_Exception e) { 
            System.out.println("Expected exception: NotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (WaitingForApprovalException_Exception e) { 
            System.out.println("Expected exception: WaitingForApprovalException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking spkacRequest...");
        java.lang.String _spkacRequest_arg0 = "";
        java.lang.String _spkacRequest_arg1 = "";
        java.lang.String _spkacRequest_arg2 = "";
        java.lang.String _spkacRequest_arg3 = "";
        java.lang.String _spkacRequest_arg4 = "";
        try {
            net.felsing.client_cert.ejbca.CertificateResponse _spkacRequest__return = port.spkacRequest(_spkacRequest_arg0, _spkacRequest_arg1, _spkacRequest_arg2, _spkacRequest_arg3, _spkacRequest_arg4);
            System.out.println("spkacRequest.result=" + _spkacRequest__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (NotFoundException_Exception e) { 
            System.out.println("Expected exception: NotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (CesecoreException_Exception e) { 
            System.out.println("Expected exception: CesecoreException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking editUser...");
        net.felsing.client_cert.ejbca.UserDataVOWS _editUser_arg0 = new net.felsing.client_cert.ejbca.UserDataVOWS();
        try {
            port.editUser(_editUser_arg0);

        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (UserDoesntFullfillEndEntityProfile_Exception e) { 
            System.out.println("Expected exception: UserDoesntFullfillEndEntityProfile has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (WaitingForApprovalException_Exception e) { 
            System.out.println("Expected exception: WaitingForApprovalException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getAvailableCAs...");
        try {
            java.util.List<net.felsing.client_cert.ejbca.NameAndId> _getAvailableCAs__return = port.getAvailableCAs();
            System.out.println("getAvailableCAs.result=" + _getAvailableCAs__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getLastCAChain...");
        java.lang.String _getLastCAChain_arg0 = "";
        try {
            java.util.List<net.felsing.client_cert.ejbca.Certificate> _getLastCAChain__return = port.getLastCAChain(_getLastCAChain_arg0);
            System.out.println("getLastCAChain.result=" + _getLastCAChain__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getLastCertChain...");
        java.lang.String _getLastCertChain_arg0 = "";
        try {
            java.util.List<net.felsing.client_cert.ejbca.Certificate> _getLastCertChain__return = port.getLastCertChain(_getLastCertChain_arg0);
            System.out.println("getLastCertChain.result=" + _getLastCertChain__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking deleteUserDataFromSource...");
        java.util.List<java.lang.String> _deleteUserDataFromSource_arg0 = null;
        java.lang.String _deleteUserDataFromSource_arg1 = "";
        boolean _deleteUserDataFromSource_arg2 = false;
        try {
            boolean _deleteUserDataFromSource__return = port.deleteUserDataFromSource(_deleteUserDataFromSource_arg0, _deleteUserDataFromSource_arg1, _deleteUserDataFromSource_arg2);
            System.out.println("deleteUserDataFromSource.result=" + _deleteUserDataFromSource__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (MultipleMatchException_Exception e) { 
            System.out.println("Expected exception: MultipleMatchException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (UserDataSourceException_Exception e) { 
            System.out.println("Expected exception: UserDataSourceException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking findCerts...");
        java.lang.String _findCerts_arg0 = "";
        boolean _findCerts_arg1 = false;
        try {
            java.util.List<net.felsing.client_cert.ejbca.Certificate> _findCerts__return = port.findCerts(_findCerts_arg0, _findCerts_arg1);
            System.out.println("findCerts.result=" + _findCerts__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking certificateRequest...");
        net.felsing.client_cert.ejbca.UserDataVOWS _certificateRequest_arg0 = new net.felsing.client_cert.ejbca.UserDataVOWS();
        java.lang.String _certificateRequest_arg1 = "";
        int _certificateRequest_arg2 = 0;
        java.lang.String _certificateRequest_arg3 = "";
        java.lang.String _certificateRequest_arg4 = "";
        try {
            net.felsing.client_cert.ejbca.CertificateResponse _certificateRequest__return = port.certificateRequest(_certificateRequest_arg0, _certificateRequest_arg1, _certificateRequest_arg2, _certificateRequest_arg3, _certificateRequest_arg4);
            System.out.println("certificateRequest.result=" + _certificateRequest__return);

        } catch (NotFoundException_Exception e) { 
            System.out.println("Expected exception: NotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (UserDoesntFullfillEndEntityProfile_Exception e) { 
            System.out.println("Expected exception: UserDoesntFullfillEndEntityProfile has occurred.");
            System.out.println(e.toString());
        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (WaitingForApprovalException_Exception e) { 
            System.out.println("Expected exception: WaitingForApprovalException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getAvailableCertificateProfiles...");
        int _getAvailableCertificateProfiles_arg0 = 0;
        try {
            java.util.List<net.felsing.client_cert.ejbca.NameAndId> _getAvailableCertificateProfiles__return = port.getAvailableCertificateProfiles(_getAvailableCertificateProfiles_arg0);
            System.out.println("getAvailableCertificateProfiles.result=" + _getAvailableCertificateProfiles__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getEjbcaVersion...");
        java.lang.String _getEjbcaVersion__return = port.getEjbcaVersion();
        System.out.println("getEjbcaVersion.result=" + _getEjbcaVersion__return);


        }
        {
        System.out.println("Invoking customLog...");
        int _customLog_arg0 = 0;
        java.lang.String _customLog_arg1 = "";
        java.lang.String _customLog_arg2 = "";
        java.lang.String _customLog_arg3 = "";
        net.felsing.client_cert.ejbca.Certificate _customLog_arg4 = new net.felsing.client_cert.ejbca.Certificate();
        java.lang.String _customLog_arg5 = "";
        try {
            port.customLog(_customLog_arg0, _customLog_arg1, _customLog_arg2, _customLog_arg3, _customLog_arg4, _customLog_arg5);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking isApproved...");
        int _isApproved_arg0 = 0;
        try {
            int _isApproved__return = port.isApproved(_isApproved_arg0);
            System.out.println("isApproved.result=" + _isApproved__return);

        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalRequestExpiredException_Exception e) { 
            System.out.println("Expected exception: ApprovalRequestExpiredException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getAuthorizedEndEntityProfiles...");
        try {
            java.util.List<net.felsing.client_cert.ejbca.NameAndId> _getAuthorizedEndEntityProfiles__return = port.getAuthorizedEndEntityProfiles();
            System.out.println("getAuthorizedEndEntityProfiles.result=" + _getAuthorizedEndEntityProfiles__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking revokeUser...");
        java.lang.String _revokeUser_arg0 = "";
        int _revokeUser_arg1 = 0;
        boolean _revokeUser_arg2 = false;
        try {
            port.revokeUser(_revokeUser_arg0, _revokeUser_arg1, _revokeUser_arg2);

        } catch (AlreadyRevokedException_Exception e) { 
            System.out.println("Expected exception: AlreadyRevokedException has occurred.");
            System.out.println(e.toString());
        } catch (NotFoundException_Exception e) { 
            System.out.println("Expected exception: NotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (WaitingForApprovalException_Exception e) { 
            System.out.println("Expected exception: WaitingForApprovalException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking existsHardToken...");
        java.lang.String _existsHardToken_arg0 = "";
        try {
            boolean _existsHardToken__return = port.existsHardToken(_existsHardToken_arg0);
            System.out.println("existsHardToken.result=" + _existsHardToken__return);

        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking revokeCert...");
        java.lang.String _revokeCert_arg0 = "";
        java.lang.String _revokeCert_arg1 = "";
        int _revokeCert_arg2 = 0;
        try {
            port.revokeCert(_revokeCert_arg0, _revokeCert_arg1, _revokeCert_arg2);

        } catch (AlreadyRevokedException_Exception e) { 
            System.out.println("Expected exception: AlreadyRevokedException has occurred.");
            System.out.println(e.toString());
        } catch (NotFoundException_Exception e) { 
            System.out.println("Expected exception: NotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (WaitingForApprovalException_Exception e) { 
            System.out.println("Expected exception: WaitingForApprovalException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking cvcRequest...");
        java.lang.String _cvcRequest_arg0 = "";
        java.lang.String _cvcRequest_arg1 = "";
        java.lang.String _cvcRequest_arg2 = "";
        try {
            java.util.List<net.felsing.client_cert.ejbca.Certificate> _cvcRequest__return = port.cvcRequest(_cvcRequest_arg0, _cvcRequest_arg1, _cvcRequest_arg2);
            System.out.println("cvcRequest.result=" + _cvcRequest__return);

        } catch (NotFoundException_Exception e) { 
            System.out.println("Expected exception: NotFoundException has occurred.");
            System.out.println(e.toString());
        } catch (SignRequestException_Exception e) { 
            System.out.println("Expected exception: SignRequestException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (UserDoesntFullfillEndEntityProfile_Exception e) { 
            System.out.println("Expected exception: UserDoesntFullfillEndEntityProfile has occurred.");
            System.out.println(e.toString());
        } catch (ApprovalException_Exception e) { 
            System.out.println("Expected exception: ApprovalException has occurred.");
            System.out.println(e.toString());
        } catch (CertificateExpiredException_Exception e) { 
            System.out.println("Expected exception: CertificateExpiredException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (CesecoreException_Exception e) { 
            System.out.println("Expected exception: CesecoreException has occurred.");
            System.out.println(e.toString());
        } catch (WaitingForApprovalException_Exception e) { 
            System.out.println("Expected exception: WaitingForApprovalException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking isAuthorized...");
        java.lang.String _isAuthorized_arg0 = "";
        try {
            boolean _isAuthorized__return = port.isAuthorized(_isAuthorized_arg0);
            System.out.println("isAuthorized.result=" + _isAuthorized__return);

        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking republishCertificate...");
        java.lang.String _republishCertificate_arg0 = "";
        java.lang.String _republishCertificate_arg1 = "";
        try {
            port.republishCertificate(_republishCertificate_arg0, _republishCertificate_arg1);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (PublisherException_Exception e) { 
            System.out.println("Expected exception: PublisherException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getCertificate...");
        java.lang.String _getCertificate_arg0 = "";
        java.lang.String _getCertificate_arg1 = "";
        try {
            net.felsing.client_cert.ejbca.Certificate _getCertificate__return = port.getCertificate(_getCertificate_arg0, _getCertificate_arg1);
            System.out.println("getCertificate.result=" + _getCertificate__return);

        } catch (AuthorizationDeniedException_Exception e) { 
            System.out.println("Expected exception: AuthorizationDeniedException has occurred.");
            System.out.println(e.toString());
        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        } catch (CADoesntExistsException_Exception e) { 
            System.out.println("Expected exception: CADoesntExistsException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getPublisherQueueLength...");
        java.lang.String _getPublisherQueueLength_arg0 = "";
        try {
            int _getPublisherQueueLength__return = port.getPublisherQueueLength(_getPublisherQueueLength_arg0);
            System.out.println("getPublisherQueueLength.result=" + _getPublisherQueueLength__return);

        } catch (EjbcaException_Exception e) { 
            System.out.println("Expected exception: EjbcaException has occurred.");
            System.out.println(e.toString());
        }
            }

        System.exit(0);
    }

}
