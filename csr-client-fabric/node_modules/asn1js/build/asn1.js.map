{"version":3,"sources":["../src/asn1.js"],"names":["fromBER","compareSchema","verifySchema","fromJSON","LocalBaseBlock","parameters","blockLength","error","warnings","valueBeforeDecode","slice","ArrayBuffer","blockName","constructor","byteLength","LocalHexBlock","isHexOnly","valueHex","inputBuffer","inputOffset","inputLength","intBuffer","Uint8Array","length","push","sizeOnly","object","ex","BaseClass","LocalIdentificationBlock","idBlock","tagClass","tagNumber","isConstructed","firstOctet","retBuf","retView","number","encodedBuf","encodedView","size","i","curView","tagClassMask","tagNumberMask","count","tagNumberBufferMaxLength","intTagNumberBuffer","tempBuffer","tempBufferView","set","LocalLengthBlock","isIndefiniteForm","lenBlock","longFormUsed","lengthBufferView","LocalValueBlock","TypeError","BaseBlock","valueBlockType","name","optional","primitiveSchema","valueBlock","resultOffset","idBlockBuf","toBER","valueBlockSizeBuf","lenBlockBuf","valueBlockBuf","indefBuf","indefView","toJSON","LocalPrimitiveValueBlock","valueHexView","Primitive","LocalConstructedValueBlock","value","initialOffset","initialLength","checkLen","indefiniteLength","currentOffset","returnObject","LocalFromBER","offset","result","concat","EndOfContent","pop","valueBuf","Constructed","LocalEndOfContentValueBlock","paramaters","LocalBooleanValueBlock","view","Boolean","Sequence","Set","Null","LocalOctetStringValueBlock","prototype","call","currentBlockName","OctetString","octetString","JSON","stringify","LocalBitStringValueBlock","unusedBits","BitString","bitString","LocalIntegerValueBlock","valueDec","expectedLength","_valueHex","updatedValueHex","updatedView","_value","_valueDec","Integer","otherValue","integer","toDER","Math","pow","fromDER","Enumerated","LocalSidValueBlock","isFirstSid","tempValueHex","tempView","sidValue","toString","LocalObjectIdentifierValueBlock","fromString","sidBlock","string","pos1","pos2","sid","flag","indexOf","substr","plus","parsedSID","parseInt","isNaN","sidStr","sidArray","ObjectIdentifier","LocalUtf8StringValueBlock","Utf8String","fromBuffer","String","fromCharCode","apply","decodeURIComponent","escape","inputString","str","unescape","encodeURIComponent","strLen","charCodeAt","LocalBmpStringValueBlock","BmpString","copyBuffer","valueView","temp","Uint16Array","strLength","codeBuf","codeView","dif","j","LocalUniversalStringValueBlock","UniversalString","Uint32Array","LocalSimpleStringValueBlock","LocalSimpleStringBlock","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","UTCTime","year","month","day","hour","minute","second","fromDate","valueDate","toBuffer","buffer","inputDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","Date","UTC","parser","parserArray","exec","outputArray","Array","join","GeneralizedTime","millisecond","getUTCMilliseconds","isUTC","timeString","dateTimeString","fractionPart","hourDifference","minuteDifference","Number","valueOf","Error","multiplier","differencePosition","differenceString","fractionPointPosition","fractionPartCheck","fractionResult","floor","tempDate","getUTCDay","DATE","TimeOfDay","DateTime","Duration","TIME","Choice","Any","Repeated","local","RawData","data","incomingOffset","localChangeType","inputObject","newType","newObject","Object","newASN1Type","root","inputData","inputSchema","choiceResult","verified","_result","hasOwnProperty","encodedId","decodedOffset","schemaView","asn1View","replace","admission","maxLength","_optional","arrayRoot","asn1","json"],"mappings":"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;AACA,SAAK,EAAL;AACCsG,mBAAcb,IAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACC9J,kBAAa5E,KAAb,GAAqB,8CAArB;AACA,YAAO;AACN8E,cAAS,CAAC,CADJ;AAENC,cAAQH;AAFF,MAAP;AAID;AACA;AACA,SAAK,EAAL;AACC2K,mBAAc7J,QAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACC6J,mBAAc5J,GAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACC4J,mBAAczE,aAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCyE,mBAAcxE,eAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCwE,mBAAcvE,aAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCuE,mBAActE,cAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCsE,mBAAcrE,SAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCqE,mBAAchE,OAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCgE,mBAActC,eAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCsC,mBAAcpE,aAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCoE,mBAAcnE,aAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCmE,mBAAclE,aAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCkE,mBAAc7E,eAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACC6E,mBAAcjE,eAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCiE,mBAAcxF,SAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCwF,mBAAcjB,IAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCiB,mBAAchB,SAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCgB,mBAAcf,QAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCe,mBAAcd,QAAd;AACA;AACD;AACA;AACA;AACC;AACC,UAAIY,kBAAJ;;AAEA,UAAGzK,aAAarD,OAAb,CAAqBG,aAArB,KAAuC,IAA1C,EACC2N,YAAY,IAAIjK,WAAJ,EAAZ,CADD,KAGCiK,YAAY,IAAIjL,SAAJ,EAAZ;;AAEDiL,gBAAU9N,OAAV,GAAoBqD,aAAarD,OAAjC;AACA8N,gBAAUvM,QAAV,GAAqB8B,aAAa9B,QAAlC;AACAuM,gBAAUpP,QAAV,GAAqB2E,aAAa3E,QAAlC;;AAEA2E,qBAAeyK,SAAf;;AAEA5L,qBAAemB,aAAanF,OAAb,CAAqBkB,WAArB,EAAkCC,WAAlC,EAA+CC,WAA/C,CAAf;AACA;AACF;AA1LD;AA4LA;AACD;AACA;AACA,OAAK,CAAL,CA/MD,CA+MS;AACR,OAAK,CAAL,CAhND,CAgNS;AACR,OAAK,CAAL,CAjND,CAiNS;AACR;AACC;AACC,QAAG+D,aAAarD,OAAb,CAAqBG,aAArB,KAAuC,IAA1C,EACC6N,cAAcnK,WAAd,CADD,KAGCmK,cAAcnL,SAAd;AACD;AACF;AAzND;AA2NA;;AAEA;AACAQ,gBAAesK,gBAAgBtK,YAAhB,EAA8B2K,WAA9B,CAAf;AACA9L,gBAAemB,aAAanF,OAAb,CAAqBkB,WAArB,EAAkCC,WAAlC,EAAgDgE,aAAa9B,QAAb,CAAsBD,gBAAtB,KAA2C,IAA5C,GAAoDhC,WAApD,GAAkE+D,aAAa9B,QAAb,CAAsB9B,MAAvI,CAAf;AACA;;AAEA;AACA4D,cAAa1E,iBAAb,GAAiCS,YAAYR,KAAZ,CAAkB8O,cAAlB,EAAkCA,iBAAiBrK,aAAa7E,WAAhE,CAAjC;AACA;;AAEA,QAAO;AACN+E,UAAQrB,YADF;AAENsB,UAAQH;AAFF,EAAP;AAIA;AACD;AACA;;;;AAIO,SAASnF,OAAT,CAAiBkB,WAAjB,EACP;AACC,KAAGA,YAAYJ,UAAZ,KAA2B,CAA9B,EACA;AACC,MAAMwE,SAAS,IAAI5B,SAAJ,CAAc,EAAd,EAAkBmM,MAAlB,CAAf;AACAvK,SAAO/E,KAAP,GAAe,8BAAf;;AAEA,SAAO;AACN8E,WAAS,CAAC,CADJ;AAENC;AAFM,GAAP;AAIA;;AAED,QAAOF,aAAalE,WAAb,EAA0B,CAA1B,EAA6BA,YAAYJ,UAAzC,CAAP;AACA;AACD;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOO,SAASb,aAAT,CAAuB8P,IAAvB,EAA6BC,SAA7B,EAAwCC,WAAxC,EACP;AACC;AACA,KAAGA,uBAAuBf,MAA1B,EACA;AACC,MAAMgB,eAAe,KAArB;;AAEA,OAAI,IAAInF,IAAI,CAAZ,EAAeA,IAAIkF,YAAYpL,KAAZ,CAAkBtD,MAArC,EAA6CwJ,GAA7C,EACA;AACC,OAAMzF,SAASrF,cAAc8P,IAAd,EAAoBC,SAApB,EAA+BC,YAAYpL,KAAZ,CAAkBkG,CAAlB,CAA/B,CAAf;AACA,OAAGzF,OAAO6K,QAAP,KAAoB,IAAvB,EACA;AACC,WAAO;AACNA,eAAU,IADJ;AAEN7K,aAAQyK;AAFF,KAAP;AAIA;AACD;;AAED,MAAGG,iBAAiB,KAApB,EACA;AACC,OAAME,UAAU;AACfD,cAAU,KADK;AAEf7K,YAAQ;AACP/E,YAAO;AADA;AAFO,IAAhB;;AAOA,OAAG0P,YAAYI,cAAZ,CAA2B,MAA3B,CAAH,EACCD,QAAQxM,IAAR,GAAeqM,YAAYrM,IAA3B;;AAED,UAAOwM,OAAP;AACA;AACD;AACD;;AAEA;AACA,KAAGH,uBAAuBd,GAA1B,EACA;AACC;AACA,MAAGc,YAAYI,cAAZ,CAA2B,MAA3B,CAAH,EACCN,KAAKE,YAAYrM,IAAjB,IAAyBoM,SAAzB;AACD;;AAEA,SAAO;AACNG,aAAU,IADJ;AAEN7K,WAAQyK;AAFF,GAAP;AAIA;AACD;;AAEA;AACA,KAAIA,gBAAgBF,MAAjB,KAA6B,KAAhC,EACA;AACC,SAAO;AACNM,aAAU,KADJ;AAEN7K,WAAQ,EAAE/E,OAAO,mBAAT;AAFF,GAAP;AAIA;;AAED,KAAIyP,qBAAqBH,MAAtB,KAAkC,KAArC,EACA;AACC,SAAO;AACNM,aAAU,KADJ;AAEN7K,WAAQ,EAAE/E,OAAO,kBAAT;AAFF,GAAP;AAIA;;AAED,KAAI0P,uBAAuBJ,MAAxB,KAAoC,KAAvC,EACA;AACC,SAAO;AACNM,aAAU,KADJ;AAEN7K,WAAQ,EAAE/E,OAAO,oBAAT;AAFF,GAAP;AAIA;;AAED,KAAI,aAAa0P,WAAd,KAA+B,KAAlC,EACA;AACC,SAAO;AACNE,aAAU,KADJ;AAEN7K,WAAQ,EAAE/E,OAAO,oBAAT;AAFF,GAAP;AAIA;AACD;;AAEA;AACA;AACA;AACA,KAAI,aAAa0P,YAAYnO,OAA1B,KAAuC,KAA1C,EACA;AACC,SAAO;AACNqO,aAAU,KADJ;AAEN7K,WAAQ,EAAE/E,OAAO,oBAAT;AAFF,GAAP;AAIA;;AAED,KAAI,WAAW0P,YAAYnO,OAAxB,KAAqC,KAAxC,EACA;AACC,SAAO;AACNqO,aAAU,KADJ;AAEN7K,WAAQ,EAAE/E,OAAO,oBAAT;AAFF,GAAP;AAIA;;AAED,KAAM+P,YAAYL,YAAYnO,OAAZ,CAAoBoC,KAApB,CAA0B,KAA1B,CAAlB;AACA,KAAGoM,UAAUxP,UAAV,KAAyB,CAA5B,EACA;AACC,SAAO;AACNqP,aAAU,KADJ;AAEN7K,WAAQ,EAAE/E,OAAO,yCAAT;AAFF,GAAP;AAIA;;AAED,KAAMgQ,gBAAgBN,YAAYnO,OAAZ,CAAoB9B,OAApB,CAA4BsQ,SAA5B,EAAuC,CAAvC,EAA0CA,UAAUxP,UAApD,CAAtB;AACA,KAAGyP,kBAAmB,CAAC,CAAvB,EACA;AACC,SAAO;AACNJ,aAAU,KADJ;AAEN7K,WAAQ,EAAE/E,OAAO,yCAAT;AAFF,GAAP;AAIA;AACD;;AAEA;AACA,KAAG0P,YAAYnO,OAAZ,CAAoBuO,cAApB,CAAmC,UAAnC,MAAmD,KAAtD,EACA;AACC,SAAO;AACNF,aAAU,KADJ;AAEN7K,WAAQ,EAAE/E,OAAO,oBAAT;AAFF,GAAP;AAIA;;AAED,KAAG0P,YAAYnO,OAAZ,CAAoBC,QAApB,KAAiCiO,UAAUlO,OAAV,CAAkBC,QAAtD,EACA;AACC,SAAO;AACNoO,aAAU,KADJ;AAEN7K,WAAQyK;AAFF,GAAP;AAIA;AACD;AACA;AACA,KAAGE,YAAYnO,OAAZ,CAAoBuO,cAApB,CAAmC,WAAnC,MAAoD,KAAvD,EACA;AACC,SAAO;AACNF,aAAU,KADJ;AAEN7K,WAAQ,EAAE/E,OAAO,oBAAT;AAFF,GAAP;AAIA;;AAED,KAAG0P,YAAYnO,OAAZ,CAAoBE,SAApB,KAAkCgO,UAAUlO,OAAV,CAAkBE,SAAvD,EACA;AACC,SAAO;AACNmO,aAAU,KADJ;AAEN7K,WAAQyK;AAFF,GAAP;AAIA;AACD;AACA;AACA,KAAGE,YAAYnO,OAAZ,CAAoBuO,cAApB,CAAmC,eAAnC,MAAwD,KAA3D,EACA;AACC,SAAO;AACNF,aAAU,KADJ;AAEN7K,WAAQ,EAAE/E,OAAO,oBAAT;AAFF,GAAP;AAIA;;AAED,KAAG0P,YAAYnO,OAAZ,CAAoBG,aAApB,KAAsC+N,UAAUlO,OAAV,CAAkBG,aAA3D,EACA;AACC,SAAO;AACNkO,aAAU,KADJ;AAEN7K,WAAQyK;AAFF,GAAP;AAIA;AACD;AACA;AACA,KAAI,eAAeE,YAAYnO,OAA5B,KAAyC,KAA5C,EAAmD;AACnD;AACC,UAAO;AACNqO,cAAU,KADJ;AAEN7K,YAAQ,EAAE/E,OAAO,oBAAT;AAFF,IAAP;AAIA;;AAED,KAAG0P,YAAYnO,OAAZ,CAAoBd,SAApB,KAAkCgP,UAAUlO,OAAV,CAAkBd,SAAvD,EACA;AACC,SAAO;AACNmP,aAAU,KADJ;AAEN7K,WAAQyK;AAFF,GAAP;AAIA;AACD;AACA;AACA,KAAGE,YAAYnO,OAAZ,CAAoBd,SAApB,KAAkC,IAArC,EACA;AACC,MAAI,cAAciP,YAAYnO,OAA3B,KAAwC,KAA3C,EAAkD;AAClD;AACC,WAAO;AACNqO,eAAU,KADJ;AAEN7K,aAAQ,EAAE/E,OAAO,oBAAT;AAFF,KAAP;AAIA;;AAED,MAAMiQ,aAAa,IAAIlP,UAAJ,CAAe2O,YAAYnO,OAAZ,CAAoBb,QAAnC,CAAnB;AACA,MAAMwP,WAAW,IAAInP,UAAJ,CAAe0O,UAAUlO,OAAV,CAAkBb,QAAjC,CAAjB;;AAEA,MAAGuP,WAAWjP,MAAX,KAAsBkP,SAASlP,MAAlC,EACA;AACC,UAAO;AACN4O,cAAU,KADJ;AAEN7K,YAAQyK;AAFF,IAAP;AAIA;;AAED,OAAI,IAAItN,IAAI,CAAZ,EAAeA,IAAI+N,WAAWjP,MAA9B,EAAsCkB,GAAtC,EACA;AACC,OAAG+N,WAAW/N,CAAX,MAAkBgO,SAAS,CAAT,CAArB,EACA;AACC,WAAO;AACNN,eAAU,KADJ;AAEN7K,aAAQyK;AAFF,KAAP;AAIA;AACD;AACD;AACD;AACA;;AAEA;AACA,KAAGE,YAAYI,cAAZ,CAA2B,MAA3B,CAAH,EACA;AACCJ,cAAYrM,IAAZ,GAAmBqM,YAAYrM,IAAZ,CAAiB8M,OAAjB,CAAyB,YAAzB,EAAuC,EAAvC,CAAnB;AACA,MAAGT,YAAYrM,IAAZ,KAAqB,EAAxB,EACCmM,KAAKE,YAAYrM,IAAjB,IAAyBoM,SAAzB;AACD;AACD;;AAEA;AACA,KAAGC,YAAYnO,OAAZ,CAAoBG,aAApB,KAAsC,IAAzC,EACA;AACC,MAAI0O,YAAY,CAAhB;AACA,MAAIrL,WAAS,EAAE6K,UAAU,KAAZ,EAAb;;AAEA,MAAIS,YAAYX,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6BtD,MAA7C;;AAEA,MAAGqP,YAAY,CAAf,EACA;AACC,OAAGX,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6B,CAA7B,aAA2CuK,QAA9C,EACCwB,YAAYZ,UAAUjM,UAAV,CAAqBc,KAArB,CAA2BtD,MAAvC;AACD;;AAED;AACA,MAAGqP,cAAc,CAAjB,EACA;AACC,UAAO;AACNT,cAAU,IADJ;AAEN7K,YAAQyK;AAFF,IAAP;AAIA;AACD;;AAEA;AACA,MAAIC,UAAUjM,UAAV,CAAqBc,KAArB,CAA2BtD,MAA3B,KAAsC,CAAvC,IACD0O,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6BtD,MAA7B,KAAwC,CAD1C,EAEA;AACC,OAAIsP,YAAY,IAAhB;;AAEA,QAAI,IAAIpO,MAAI,CAAZ,EAAeA,MAAIwN,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6BtD,MAAhD,EAAwDkB,KAAxD;AACCoO,gBAAYA,cAAcZ,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6BpC,GAA7B,EAAgCoB,QAAhC,IAA4C,KAA1D,CAAZ;AADD,IAGA,IAAGgN,cAAc,IAAjB,EACA;AACC,WAAO;AACNV,eAAU,IADJ;AAEN7K,aAAQyK;AAFF,KAAP;AAIA;;AAED;AACA,OAAGE,YAAYI,cAAZ,CAA2B,MAA3B,CAAH,EACA;AACCJ,gBAAYrM,IAAZ,GAAmBqM,YAAYrM,IAAZ,CAAiB8M,OAAjB,CAAyB,YAAzB,EAAuC,EAAvC,CAAnB;AACA,QAAGT,YAAYrM,IAAZ,KAAqB,EAAxB,EACC,OAAOmM,KAAKE,YAAYrM,IAAjB,CAAP;AACD;AACD;;AAEAmM,QAAKxP,KAAL,GAAa,4BAAb;;AAEA,UAAO;AACN4P,cAAU,KADJ;AAEN7K,YAAQyK;AAFF,IAAP;AAIA;AACD;;AAEA,OAAI,IAAItN,MAAI,CAAZ,EAAeA,MAAImO,SAAnB,EAA8BnO,KAA9B,EACA;AACC;AACA,OAAIA,MAAIkO,SAAL,IAAmBX,UAAUjM,UAAV,CAAqBc,KAArB,CAA2BtD,MAAjD,EACA;AACC,QAAG0O,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6BpC,GAA7B,EAAgCoB,QAAhC,KAA6C,KAAhD,EACA;AACC,SAAMuM,WAAU;AACfD,gBAAU,KADK;AAEf7K,cAAQyK;AAFO,MAAhB;;AAKAA,UAAKxP,KAAL,GAAa,mDAAb;;AAEA;AACA,SAAG0P,YAAYI,cAAZ,CAA2B,MAA3B,CAAH,EACA;AACCJ,kBAAYrM,IAAZ,GAAmBqM,YAAYrM,IAAZ,CAAiB8M,OAAjB,CAAyB,YAAzB,EAAuC,EAAvC,CAAnB;AACA,UAAGT,YAAYrM,IAAZ,KAAqB,EAAxB,EACA;AACC,cAAOmM,KAAKE,YAAYrM,IAAjB,CAAP;AACAwM,gBAAQxM,IAAR,GAAeqM,YAAYrM,IAA3B;AACA;AACD;AACD;;AAEA,YAAOwM,QAAP;AACA;AACD;AACD;AA1BA,QA4BA;AACC;AACA,SAAGH,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6B,CAA7B,aAA2CuK,QAA9C,EACA;AACC9J,iBAASrF,cAAc8P,IAAd,EAAoBC,UAAUjM,UAAV,CAAqBc,KAArB,CAA2BpC,GAA3B,CAApB,EAAmDwN,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6B,CAA7B,EAAgCA,KAAnF,CAAT;AACA,UAAGS,SAAO6K,QAAP,KAAoB,KAAvB,EACA;AACC,WAAGF,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6B,CAA7B,EAAgChB,QAAhC,KAA6C,IAAhD,EACC8M,YADD,KAGA;AACC;AACA,YAAGV,YAAYI,cAAZ,CAA2B,MAA3B,CAAH,EACA;AACCJ,qBAAYrM,IAAZ,GAAmBqM,YAAYrM,IAAZ,CAAiB8M,OAAjB,CAAyB,YAAzB,EAAuC,EAAvC,CAAnB;AACA,aAAGT,YAAYrM,IAAZ,KAAqB,EAAxB,EACC,OAAOmM,KAAKE,YAAYrM,IAAjB,CAAP;AACD;AACD;;AAEA,eAAO0B,QAAP;AACA;AACD;;AAED,UAAI,UAAU2K,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6B,CAA7B,CAAX,IAAgDoL,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6B,CAA7B,EAAgCjB,IAAhC,CAAqCrC,MAArC,GAA8C,CAAjG,EACA;AACC,WAAIuP,YAAY,EAAhB;;AAEA,WAAI,WAAWb,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6B,CAA7B,CAAZ,IAAiDoL,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6B,CAA7B,EAAgCwK,KAAhC,KAA0C,IAA9F,EACCyB,YAAYd,SAAZ,CADD,KAGCc,YAAYf,IAAZ;;AAED,WAAG,OAAOe,UAAUb,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6B,CAA7B,EAAgCjB,IAA1C,CAAP,KAA2D,WAA9D,EACCkN,UAAUb,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6B,CAA7B,EAAgCjB,IAA1C,IAAkD,EAAlD;;AAEDkN,iBAAUb,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6B,CAA7B,EAAgCjB,IAA1C,EAAgDpC,IAAhD,CAAqDwO,UAAUjM,UAAV,CAAqBc,KAArB,CAA2BpC,GAA3B,CAArD;AACA;AACD;AACD;AArCA,UAuCA;AACC6C,kBAASrF,cAAc8P,IAAd,EAAoBC,UAAUjM,UAAV,CAAqBc,KAArB,CAA2BpC,MAAIkO,SAA/B,CAApB,EAA+DV,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6BpC,GAA7B,CAA/D,CAAT;AACA,WAAG6C,SAAO6K,QAAP,KAAoB,KAAvB,EACA;AACC,YAAGF,YAAYlM,UAAZ,CAAuBc,KAAvB,CAA6BpC,GAA7B,EAAgCoB,QAAhC,KAA6C,IAAhD,EACC8M,YADD,KAGA;AACC;AACA,aAAGV,YAAYI,cAAZ,CAA2B,MAA3B,CAAH,EACA;AACCJ,sBAAYrM,IAAZ,GAAmBqM,YAAYrM,IAAZ,CAAiB8M,OAAjB,CAAyB,YAAzB,EAAuC,EAAvC,CAAnB;AACA,cAAGT,YAAYrM,IAAZ,KAAqB,EAAxB,EACC,OAAOmM,KAAKE,YAAYrM,IAAjB,CAAP;AACD;AACD;;AAEA,gBAAO0B,QAAP;AACA;AACD;AACD;AACD;AACD;;AAED,MAAGA,SAAO6K,QAAP,KAAoB,KAAvB,EAA8B;AAC9B;AACC,QAAMC,WAAU;AACfD,eAAU,KADK;AAEf7K,aAAQyK;AAFO,KAAhB;;AAKA;AACA,QAAGE,YAAYI,cAAZ,CAA2B,MAA3B,CAAH,EACA;AACCJ,iBAAYrM,IAAZ,GAAmBqM,YAAYrM,IAAZ,CAAiB8M,OAAjB,CAAyB,YAAzB,EAAuC,EAAvC,CAAnB;AACA,SAAGT,YAAYrM,IAAZ,KAAqB,EAAxB,EACA;AACC,aAAOmM,KAAKE,YAAYrM,IAAjB,CAAP;AACAwM,eAAQxM,IAAR,GAAeqM,YAAYrM,IAA3B;AACA;AACD;AACD;;AAEA,WAAOwM,QAAP;AACA;;AAED,SAAO;AACND,aAAU,IADJ;AAEN7K,WAAQyK;AAFF,GAAP;AAIA;AACD;AACA;AACA,KAAI,qBAAqBE,WAAtB,IACD,cAAcD,UAAUjM,UAD1B,EAEA;AACC;AACA,MAAMgN,OAAO/Q,QAAQgQ,UAAUjM,UAAV,CAAqB9C,QAA7B,CAAb;AACA,MAAG8P,KAAK1L,MAAL,KAAiB,CAAC,CAArB,EACA;AACC,OAAM+K,WAAU;AACfD,cAAU,KADK;AAEf7K,YAAQyL,KAAKzL;AAFE,IAAhB;;AAKA;AACA,OAAG2K,YAAYI,cAAZ,CAA2B,MAA3B,CAAH,EACA;AACCJ,gBAAYrM,IAAZ,GAAmBqM,YAAYrM,IAAZ,CAAiB8M,OAAjB,CAAyB,YAAzB,EAAuC,EAAvC,CAAnB;AACA,QAAGT,YAAYrM,IAAZ,KAAqB,EAAxB,EACA;AACC,YAAOmM,KAAKE,YAAYrM,IAAjB,CAAP;AACAwM,cAAQxM,IAAR,GAAeqM,YAAYrM,IAA3B;AACA;AACD;AACD;;AAEA,UAAOwM,QAAP;AACA;AACD;;AAEA,SAAOnQ,cAAc8P,IAAd,EAAoBgB,KAAKzL,MAAzB,EAAiC2K,YAAYnM,eAA7C,CAAP;AACA;;AAED,QAAO;AACNqM,YAAU,IADJ;AAEN7K,UAAQyK;AAFF,EAAP;AAIA;AACA;AACD;AACA;AACA;;;;;;AAMO,SAAS7P,YAAT,CAAsBgB,WAAtB,EAAmC+O,WAAnC,EACP;AACC;AACA,KAAIA,uBAAuBJ,MAAxB,KAAoC,KAAvC,EACA;AACC,SAAO;AACNM,aAAU,KADJ;AAEN7K,WAAQ,EAAE/E,OAAO,yBAAT;AAFF,GAAP;AAIA;AACD;;AAEA;AACA,KAAMwQ,OAAO/Q,QAAQkB,WAAR,CAAb;AACA,KAAG6P,KAAK1L,MAAL,KAAiB,CAAC,CAArB,EACA;AACC,SAAO;AACN8K,aAAU,KADJ;AAEN7K,WAAQyL,KAAKzL;AAFP,GAAP;AAIA;AACD;;AAEA;AACA,QAAOrF,cAAc8Q,KAAKzL,MAAnB,EAA2ByL,KAAKzL,MAAhC,EAAwC2K,WAAxC,CAAP;AACA;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIO,SAAS9P,QAAT,CAAkB6Q,IAAlB,EACP,CAEC;AADA;;AAED;AACA;AACA","file":"asn1.js","sourcesContent":["/*\r\n * Copyright (c) 2016, Peculiar Ventures\r\n * All rights reserved.\r\n *\r\n * Author 2016, Yury Strozhevsky <www.strozhevsky.com>.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its contributors\r\n *    may be used to endorse or promote products derived from this software without\r\n *    specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\r\n * OF SUCH DAMAGE.\r\n *\r\n */\r\n//**************************************************************************************\r\nimport { getParametersValue, padNumber, isEqualBuffer, bufferToHexCodes, checkBufferParams, utilToBase, utilFromBase, utilEncodeTC, utilDecodeTC, utilConcatBuf, nearestPowerOf2 } from \"pvutils\";\r\n//**************************************************************************************\r\n//region Declaration for \"LocalBaseBlock\" class\r\n//**************************************************************************************\r\n/**\r\n * Class used as a base block for all remaining ASN.1 classes\r\n * @typedef LocalBaseBlock\r\n * @interface\r\n * @property {number} blockLength\r\n * @property {string} error\r\n * @property {Array.<string>} warnings\r\n * @property {ArrayBuffer} valueBeforeDecode\r\n */\r\nclass LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBaseBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueBeforeDecode]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {number} blockLength\r\n\t\t */\r\n\t\tthis.blockLength = getParametersValue(parameters, \"blockLength\", 0);\r\n\t\t/**\r\n\t\t * @type {string} error\r\n\t\t */\r\n\t\tthis.error = getParametersValue(parameters, \"error\", \"\");\r\n\t\t/**\r\n\t\t * @type {Array.<string>} warnings\r\n\t\t */\r\n\t\tthis.warnings = getParametersValue(parameters, \"warnings\", []);\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer} valueBeforeDecode\r\n\t\t */\r\n\t\tif(\"valueBeforeDecode\" in parameters)\r\n\t\t\tthis.valueBeforeDecode = parameters.valueBeforeDecode.slice(0);\r\n\t\telse\r\n\t\t\tthis.valueBeforeDecode = new ArrayBuffer(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"baseBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tblockName: this.constructor.blockName(),\r\n\t\t\tblockLength: this.blockLength,\r\n\t\t\terror: this.error,\r\n\t\t\twarnings: this.warnings,\r\n\t\t\tvalueBeforeDecode: bufferToHexCodes(this.valueBeforeDecode, 0, this.valueBeforeDecode.byteLength)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Description for \"LocalHexBlock\" class\r\n//**************************************************************************************\r\n/**\r\n * Class used as a base block for all remaining ASN.1 classes\r\n * @extends LocalBaseBlock\r\n * @typedef LocalHexBlock\r\n * @property {number} blockLength\r\n * @property {string} error\r\n * @property {Array.<string>} warnings\r\n * @property {ArrayBuffer} valueBeforeDecode\r\n * @property {boolean} isHexOnly\r\n * @property {ArrayBuffer} valueHex\r\n */\r\n//noinspection JSUnusedLocalSymbols\r\nconst LocalHexBlock = BaseClass => class LocalHexBlockMixin extends BaseClass\r\n{\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Constructor for \"LocalHexBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\t/**\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", false);\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t */\r\n\t\tif(\"valueHex\" in parameters)\r\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\r\n\t\telse\r\n\t\t\tthis.valueHex = new ArrayBuffer(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"hexBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Zero buffer length\");\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Copy input buffer to internal buffer\r\n\t\tthis.valueHex = inputBuffer.slice(inputOffset, inputOffset + inputLength);\r\n\t\t//endregion\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tif(this.isHexOnly !== true)\r\n\t\t{\r\n\t\t\tthis.error = \"Flag \\\"isHexOnly\\\" is not set, abort\";\r\n\t\t\treturn new ArrayBuffer(0);\r\n\t\t}\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn new ArrayBuffer(this.valueHex.byteLength);\r\n\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\treturn this.valueHex.slice(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.blockName = this.constructor.blockName();\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n};\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of identification block class\r\n//**************************************************************************************\r\nclass LocalIdentificationBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBaseBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [idBlock]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(\"idBlock\" in parameters)\r\n\t\t{\r\n\t\t\t//region Properties from hexBlock class\r\n\t\t\tthis.isHexOnly = getParametersValue(parameters.idBlock, \"isHexOnly\", false);\r\n\t\t\tthis.valueHex = getParametersValue(parameters.idBlock, \"valueHex\", new ArrayBuffer(0));\r\n\t\t\t//endregion\r\n\r\n\t\t\tthis.tagClass = getParametersValue(parameters.idBlock, \"tagClass\", (-1));\r\n\t\t\tthis.tagNumber = getParametersValue(parameters.idBlock, \"tagNumber\", (-1));\r\n\t\t\tthis.isConstructed = getParametersValue(parameters.idBlock, \"isConstructed\", false);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.tagClass = (-1);\r\n\t\t\tthis.tagNumber = (-1);\r\n\t\t\tthis.isConstructed = false;\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"identificationBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet firstOctet = 0;\r\n\t\tlet retBuf;\r\n\t\tlet retView;\r\n\t\t//endregion\r\n\r\n\t\tswitch(this.tagClass)\r\n\t\t{\r\n\t\t\tcase 1:\r\n\t\t\t\tfirstOctet |= 0x00; // UNIVERSAL\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tfirstOctet |= 0x40; // APPLICATION\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tfirstOctet |= 0x80; // CONTEXT-SPECIFIC\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tfirstOctet |= 0xC0; // PRIVATE\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.error = \"Unknown tag class\";\r\n\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t}\r\n\r\n\t\tif(this.isConstructed)\r\n\t\t\tfirstOctet |= 0x20;\r\n\r\n\t\tif((this.tagNumber < 31) && (!this.isHexOnly))\r\n\t\t{\r\n\t\t\tretBuf = new ArrayBuffer(1);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tif(!sizeOnly)\r\n\t\t\t{\r\n\t\t\t\tlet number = this.tagNumber;\r\n\t\t\t\tnumber &= 0x1F;\r\n\t\t\t\tfirstOctet |= number;\r\n\r\n\t\t\t\tretView[0] = firstOctet;\r\n\t\t\t}\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tif(this.isHexOnly === false)\r\n\t\t{\r\n\t\t\tconst encodedBuf = utilToBase(this.tagNumber, 7);\r\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\r\n\t\t\tconst size = encodedBuf.byteLength;\r\n\r\n\t\t\tretBuf = new ArrayBuffer(size + 1);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\t\t\tretView[0] = (firstOctet | 0x1F);\r\n\r\n\t\t\tif(!sizeOnly)\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < (size - 1); i++)\r\n\t\t\t\t\tretView[i + 1] = encodedView[i] | 0x80;\r\n\r\n\t\t\t\tretView[size] = encodedView[size - 1];\r\n\t\t\t}\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tretBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\r\n\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\tretView[0] = (firstOctet | 0x1F);\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t{\r\n\t\t\tconst curView = new Uint8Array(this.valueHex);\r\n\r\n\t\t\tfor(let i = 0; i < (curView.length - 1); i++)\r\n\t\t\t\tretView[i + 1] = curView[i] | 0x80;\r\n\r\n\t\t\tretView[this.valueHex.byteLength] = curView[curView.length - 1];\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.error = \"Zero buffer length\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Find tag class\r\n\t\tconst tagClassMask = intBuffer[0] & 0xC0;\r\n\r\n\t\tswitch(tagClassMask)\r\n\t\t{\r\n\t\t\tcase 0x00:\r\n\t\t\t\tthis.tagClass = (1); // UNIVERSAL\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0x40:\r\n\t\t\t\tthis.tagClass = (2); // APPLICATION\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0x80:\r\n\t\t\t\tthis.tagClass = (3); // CONTEXT-SPECIFIC\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0xC0:\r\n\t\t\t\tthis.tagClass = (4); // PRIVATE\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.error = \"Unknown tag class\";\r\n\t\t\t\treturn (-1);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Find it's constructed or not\r\n\t\tthis.isConstructed = (intBuffer[0] & 0x20) === 0x20;\r\n\t\t//endregion\r\n\r\n\t\t//region Find tag number\r\n\t\tthis.isHexOnly = false;\r\n\r\n\t\tconst tagNumberMask = intBuffer[0] & 0x1F;\r\n\r\n\t\t//region Simple case (tag number < 31)\r\n\t\tif(tagNumberMask !== 0x1F)\r\n\t\t{\r\n\t\t\tthis.tagNumber = (tagNumberMask);\r\n\t\t\tthis.blockLength = 1;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Tag number bigger or equal to 31\r\n\t\telse\r\n\t\t{\r\n\t\t\tlet count = 1;\r\n\r\n\t\t\tthis.valueHex = new ArrayBuffer(255);\r\n\t\t\tlet tagNumberBufferMaxLength = 255;\r\n\t\t\tlet intTagNumberBuffer = new Uint8Array(this.valueHex);\r\n\r\n\t\t\t//noinspection JSBitwiseOperatorUsage\r\n\t\t\twhile(intBuffer[count] & 0x80)\r\n\t\t\t{\r\n\t\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif(count >= intBuffer.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"End of input reached before message was fully decoded\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//region In case if tag number length is greater than 255 bytes (rare but possible case)\r\n\t\t\t\tif(count === tagNumberBufferMaxLength)\r\n\t\t\t\t{\r\n\t\t\t\t\ttagNumberBufferMaxLength += 255;\r\n\r\n\t\t\t\t\tconst tempBuffer = new ArrayBuffer(tagNumberBufferMaxLength);\r\n\t\t\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\r\n\r\n\t\t\t\t\tfor(let i = 0; i < intTagNumberBuffer.length; i++)\r\n\t\t\t\t\t\ttempBufferView[i] = intTagNumberBuffer[i];\r\n\r\n\t\t\t\t\tthis.valueHex = new ArrayBuffer(tagNumberBufferMaxLength);\r\n\t\t\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\r\n\t\t\tthis.blockLength = (count + 1);\r\n\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F; // Write last byte to buffer\r\n\r\n\t\t\t//region Cut buffer\r\n\t\t\tconst tempBuffer = new ArrayBuffer(count);\r\n\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\r\n\r\n\t\t\tfor(let i = 0; i < count; i++)\r\n\t\t\t\ttempBufferView[i] = intTagNumberBuffer[i];\r\n\r\n\t\t\tthis.valueHex = new ArrayBuffer(count);\r\n\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\r\n\t\t\tintTagNumberBuffer.set(tempBufferView);\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Try to convert long tag number to short form\r\n\t\t\tif(this.blockLength <= 9)\r\n\t\t\t\tthis.tagNumber = utilFromBase(intTagNumberBuffer, 7);\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthis.isHexOnly = true;\r\n\t\t\t\tthis.warnings.push(\"Tag too long, represented as hex-coded\");\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Check if constructed encoding was using for primitive type\r\n\t\tif(((this.tagClass === 1)) &&\r\n\t\t\t(this.isConstructed))\r\n\t\t{\r\n\t\t\tswitch(this.tagNumber)\r\n\t\t\t{\r\n\t\t\t\tcase 1:  // Boolean\r\n\t\t\t\tcase 2:  // REAL\r\n\t\t\t\tcase 5:  // Null\r\n\t\t\t\tcase 6:  // OBJECT IDENTIFIER\r\n\t\t\t\tcase 9:  // REAL\r\n\t\t\t\tcase 14: // Time\r\n\t\t\t\tcase 23:\r\n\t\t\t\tcase 24:\r\n\t\t\t\tcase 31:\r\n\t\t\t\tcase 32:\r\n\t\t\t\tcase 33:\r\n\t\t\t\tcase 34:\r\n\t\t\t\t\tthis.error = \"Constructed encoding used for primitive type\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn (inputOffset + this.blockLength); // Return current offset in input buffer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName: string,\r\n\t *  tagClass: number,\r\n\t *  tagNumber: number,\r\n\t *  isConstructed: boolean,\r\n\t *  isHexOnly: boolean,\r\n\t *  valueHex: ArrayBuffer,\r\n\t *  blockLength: number,\r\n\t *  error: string, warnings: Array.<string>,\r\n\t *  valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.blockName = this.constructor.blockName();\r\n\t\tobject.tagClass = this.tagClass;\r\n\t\tobject.tagNumber = this.tagNumber;\r\n\t\tobject.isConstructed = this.isConstructed;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of length block class\r\n//**************************************************************************************\r\nclass LocalLengthBlock extends LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalLengthBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [lenBlock]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(\"lenBlock\" in parameters)\r\n\t\t{\r\n\t\t\tthis.isIndefiniteForm = getParametersValue(parameters.lenBlock, \"isIndefiniteForm\", false);\r\n\t\t\tthis.longFormUsed = getParametersValue(parameters.lenBlock, \"longFormUsed\", false);\r\n\t\t\tthis.length = getParametersValue(parameters.lenBlock, \"length\", 0);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isIndefiniteForm = false;\r\n\t\t\tthis.longFormUsed = false;\r\n\t\t\tthis.length = 0;\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"lengthBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.error = \"Zero buffer length\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tif(intBuffer[0] === 0xFF)\r\n\t\t{\r\n\t\t\tthis.error = \"Length block 0xFF is reserved by standard\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Check for length form type\r\n\t\tthis.isIndefiniteForm = intBuffer[0] === 0x80;\r\n\t\t//endregion\r\n\r\n\t\t//region Stop working in case of indefinite length form\r\n\t\tif(this.isIndefiniteForm === true)\r\n\t\t{\r\n\t\t\tthis.blockLength = 1;\r\n\t\t\treturn (inputOffset + this.blockLength);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Check is long form of length encoding using\r\n\t\tthis.longFormUsed = !!(intBuffer[0] & 0x80);\r\n\t\t//endregion\r\n\r\n\t\t//region Stop working in case of short form of length value\r\n\t\tif(this.longFormUsed === false)\r\n\t\t{\r\n\t\t\tthis.length = (intBuffer[0]);\r\n\t\t\tthis.blockLength = 1;\r\n\t\t\treturn (inputOffset + this.blockLength);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Calculate length value in case of long form\r\n\t\tconst count = intBuffer[0] & 0x7F;\r\n\r\n\t\tif(count > 8) // Too big length value\r\n\t\t{\r\n\t\t\tthis.error = \"Too big integer\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tif((count + 1) > intBuffer.length)\r\n\t\t{\r\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tconst lengthBufferView = new Uint8Array(count);\r\n\r\n\t\tfor(let i = 0; i < count; i++)\r\n\t\t\tlengthBufferView[i] = intBuffer[i + 1];\r\n\r\n\t\tif(lengthBufferView[count - 1] === 0x00)\r\n\t\t\tthis.warnings.push(\"Needlessly long encoded length\");\r\n\r\n\t\tthis.length = utilFromBase(lengthBufferView, 8);\r\n\r\n\t\tif(this.longFormUsed && (this.length <= 127))\r\n\t\t\tthis.warnings.push(\"Unneccesary usage of long length form\");\r\n\r\n\t\tthis.blockLength = count + 1;\r\n\t\t//endregion\r\n\r\n\t\treturn (inputOffset + this.blockLength); // Return current offset in input buffer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet retBuf;\r\n\t\tlet retView;\r\n\t\t//endregion\r\n\r\n\t\tif(this.length > 127)\r\n\t\t\tthis.longFormUsed = true;\r\n\r\n\t\tif(this.isIndefiniteForm)\r\n\t\t{\r\n\t\t\tretBuf = new ArrayBuffer(1);\r\n\r\n\t\t\tif(sizeOnly === false)\r\n\t\t\t{\r\n\t\t\t\tretView = new Uint8Array(retBuf);\r\n\t\t\t\tretView[0] = 0x80;\r\n\t\t\t}\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tif(this.longFormUsed === true)\r\n\t\t{\r\n\t\t\tconst encodedBuf = utilToBase(this.length, 8);\r\n\r\n\t\t\tif(encodedBuf.byteLength > 127)\r\n\t\t\t{\r\n\t\t\t\tthis.error = \"Too big length\";\r\n\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t\t}\r\n\r\n\t\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\r\n\r\n\t\t\tif(sizeOnly === true)\r\n\t\t\t\treturn retBuf;\r\n\r\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tretView[0] = encodedBuf.byteLength | 0x80;\r\n\r\n\t\t\tfor(let i = 0; i < encodedBuf.byteLength; i++)\r\n\t\t\t\tretView[i + 1] = encodedView[i];\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tretBuf = new ArrayBuffer(1);\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t{\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tretView[0] = this.length;\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.blockName = this.constructor.blockName();\r\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\r\n\t\tobject.longFormUsed = this.longFormUsed;\r\n\t\tobject.length = this.length;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of value block class\r\n//**************************************************************************************\r\nclass LocalValueBlock extends LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"valueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Throw an exception for a function which needs to be specified in extended classes\r\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"LocalValueBlock\\\"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Throw an exception for a function which needs to be specified in extended classes\r\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"LocalValueBlock\\\"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of basic ASN.1 block class\r\n//**************************************************************************************\r\nexport class BaseBlock extends LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"BaseBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [primitiveSchema]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t * @param valueBlockType Type of value block\r\n\t */\r\n\tconstructor(parameters = {}, valueBlockType = LocalValueBlock)\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tif(\"name\" in parameters)\r\n\t\t\tthis.name = parameters.name;\r\n\t\tif(\"optional\" in parameters)\r\n\t\t\tthis.optional = parameters.optional;\r\n\t\tif(\"primitiveSchema\" in parameters)\r\n\t\t\tthis.primitiveSchema = parameters.primitiveSchema;\r\n\r\n\t\tthis.idBlock = new LocalIdentificationBlock(parameters);\r\n\t\tthis.lenBlock = new LocalLengthBlock(parameters);\r\n\t\tthis.valueBlock = new valueBlockType(parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BaseBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tlet retBuf;\r\n\r\n\t\tconst idBlockBuf = this.idBlock.toBER(sizeOnly);\r\n\t\tconst valueBlockSizeBuf = this.valueBlock.toBER(true);\r\n\r\n\t\tthis.lenBlock.length = valueBlockSizeBuf.byteLength;\r\n\t\tconst lenBlockBuf = this.lenBlock.toBER(sizeOnly);\r\n\r\n\t\tretBuf = utilConcatBuf(idBlockBuf, lenBlockBuf);\r\n\r\n\t\tlet valueBlockBuf;\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t\tvalueBlockBuf = this.valueBlock.toBER(sizeOnly);\r\n\t\telse\r\n\t\t\tvalueBlockBuf = new ArrayBuffer(this.lenBlock.length);\r\n\r\n\t\tretBuf = utilConcatBuf(retBuf, valueBlockBuf);\r\n\r\n\t\tif(this.lenBlock.isIndefiniteForm === true)\r\n\t\t{\r\n\t\t\tconst indefBuf = new ArrayBuffer(2);\r\n\r\n\t\t\tif(sizeOnly === false)\r\n\t\t\t{\r\n\t\t\t\tconst indefView = new Uint8Array(indefBuf);\r\n\r\n\t\t\t\tindefView[0] = 0x00;\r\n\t\t\t\tindefView[1] = 0x00;\r\n\t\t\t}\r\n\r\n\t\t\tretBuf = utilConcatBuf(retBuf, indefBuf);\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.idBlock = this.idBlock.toJSON();\r\n\t\tobject.lenBlock = this.lenBlock.toJSON();\r\n\t\tobject.valueBlock = this.valueBlock.toJSON();\r\n\r\n\t\tif(\"name\" in this)\r\n\t\t\tobject.name = this.name;\r\n\t\tif(\"optional\" in this)\r\n\t\t\tobject.optional = this.optional;\r\n\t\tif(\"primitiveSchema\" in this)\r\n\t\t\tobject.primitiveSchema = this.primitiveSchema.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of basic block for all PRIMITIVE types\r\n//**************************************************************************************\r\nclass LocalPrimitiveValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalPrimitiveValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueBeforeDecode]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\t//region Variables from \"hexBlock\" class\r\n\t\tif(\"valueHex\" in parameters)\r\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\r\n\t\telse\r\n\t\t\tthis.valueHex = new ArrayBuffer(0);\r\n\r\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", true);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Zero buffer length\");\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Copy input buffer into internal buffer\r\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\r\n\t\tconst valueHexView = new Uint8Array(this.valueHex);\r\n\r\n\t\tfor(let i = 0; i < intBuffer.length; i++)\r\n\t\t\tvalueHexView[i] = intBuffer[i];\r\n\t\t//endregion\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn this.valueHex.slice(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"PrimitiveValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Primitive extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Primitive\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalPrimitiveValueBlock);\r\n\r\n\t\tthis.idBlock.isConstructed = false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"PRIMITIVE\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of basic block for all CONSTRUCTED types\r\n//**************************************************************************************\r\nclass LocalConstructedValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalConstructedValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.value = getParametersValue(parameters, \"value\", []);\r\n\t\tthis.isIndefiniteForm = getParametersValue(parameters, \"isIndefiniteForm\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Store initial offset and length\r\n\t\tconst initialOffset = inputOffset;\r\n\t\tconst initialLength = inputLength;\r\n\t\t//endregion\r\n\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Zero buffer length\");\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Aux function\r\n\t\tfunction checkLen(indefiniteLength, length)\r\n\t\t{\r\n\t\t\tif(indefiniteLength === true)\r\n\t\t\t\treturn 1;\r\n\r\n\t\t\treturn length;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tlet currentOffset = inputOffset;\r\n\r\n\t\twhile(checkLen(this.isIndefiniteForm, inputLength) > 0)\r\n\t\t{\r\n\t\t\tconst returnObject = LocalFromBER(inputBuffer, currentOffset, inputLength);\r\n\t\t\tif(returnObject.offset === (-1))\r\n\t\t\t{\r\n\t\t\t\tthis.error = returnObject.result.error;\r\n\t\t\t\tthis.warnings.concat(returnObject.result.warnings);\r\n\t\t\t\treturn (-1);\r\n\t\t\t}\r\n\r\n\t\t\tcurrentOffset = returnObject.offset;\r\n\r\n\t\t\tthis.blockLength += returnObject.result.blockLength;\r\n\t\t\tinputLength -= returnObject.result.blockLength;\r\n\r\n\t\t\tthis.value.push(returnObject.result);\r\n\r\n\t\t\tif((this.isIndefiniteForm === true) && (returnObject.result.constructor.blockName() === EndOfContent.blockName()))\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif(this.isIndefiniteForm === true)\r\n\t\t{\r\n\t\t\tif(this.value[this.value.length - 1].constructor.blockName() === EndOfContent.blockName())\r\n\t\t\t\tthis.value.pop();\r\n\t\t\telse\r\n\t\t\t\tthis.warnings.push(\"No EndOfContent block encoded\");\r\n\t\t}\r\n\r\n\t\t//region Copy \"inputBuffer\" to \"valueBeforeDecode\"\r\n\t\tthis.valueBeforeDecode = inputBuffer.slice(initialOffset, initialOffset + initialLength);\r\n\t\t//endregion\r\n\r\n\t\treturn currentOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tlet retBuf = new ArrayBuffer(0);\r\n\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t{\r\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\r\n\t\t\tretBuf = utilConcatBuf(retBuf, valueBuf);\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"ConstructedValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\r\n\t\tobject.value = [];\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\tobject.value.push(this.value[i].toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Constructed extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Constructed\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalConstructedValueBlock);\r\n\r\n\t\tthis.idBlock.isConstructed = true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"CONSTRUCTED\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 EndOfContent type class\r\n//**************************************************************************************\r\nclass LocalEndOfContentValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalEndOfContentValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region There is no \"value block\" for EndOfContent type and we need to return the same offset\r\n\t\treturn inputOffset;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn new ArrayBuffer(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"EndOfContentValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class EndOfContent extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\tconstructor(paramaters = {})\r\n\t{\r\n\t\tsuper(paramaters, LocalEndOfContentValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 0; // EndOfContent\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"EndOfContent\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Boolean type class\r\n//**************************************************************************************\r\nclass LocalBooleanValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBooleanValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\t\t\r\n\t\tthis.value = getParametersValue(parameters, \"value\", false);\r\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", false);\r\n\t\t\r\n\t\tif(\"valueHex\" in parameters)\r\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.valueHex = new ArrayBuffer(1);\r\n\t\t\tif(this.value === true)\r\n\t\t\t{\r\n\t\t\t\tvar view = new Uint8Array(this.valueHex);\r\n\t\t\t\tview[0] = 0xFF;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\tif(inputLength > 1)\r\n\t\t\tthis.warnings.push(\"Boolean value encoded in more then 1 octet\");\r\n\r\n\t\tthis.value = intBuffer[0] !== 0x00;\r\n\r\n\t\tthis.isHexOnly = true;\r\n\r\n\t\t//region Copy input buffer to internal array\r\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\r\n\t\tconst view = new Uint8Array(this.valueHex);\r\n\r\n\t\tfor(let i = 0; i < intBuffer.length; i++)\r\n\t\t\tview[i] = intBuffer[i];\r\n\t\t//endregion\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn this.valueHex;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BooleanValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Boolean extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Boolean\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBooleanValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 1; // Boolean\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Boolean\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Sequence and Set type classes\r\n//**************************************************************************************\r\nexport class Sequence extends Constructed\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Sequence\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 16; // Sequence\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Sequence\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Set extends Constructed\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Set\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 17; // Set\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Set\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Null type class\r\n//**************************************************************************************\r\nexport class Null extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Null\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBaseBlock); // We will not have a call to \"Null value block\" because of specified \"fromBER\" and \"toBER\" functions\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 5; // Null\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Null\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tif(this.lenBlock.length > 0)\r\n\t\t\tthis.warnings.push(\"Non-zero length of value block for Null type\");\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tthis.blockLength += inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tconst retBuf = new ArrayBuffer(2);\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn retBuf;\r\n\r\n\t\tconst retView = new Uint8Array(retBuf);\r\n\t\tretView[0] = 0x05;\r\n\t\tretView[1] = 0x00;\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 OctetString type class\r\n//**************************************************************************************\r\nclass LocalOctetStringValueBlock extends LocalHexBlock(LocalConstructedValueBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalOctetStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isConstructed = getParametersValue(parameters, \"isConstructed\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tlet resultOffset = 0;\r\n\r\n\t\tif(this.isConstructed === true)\r\n\t\t{\r\n\t\t\tthis.isHexOnly = false;\r\n\r\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n\t\t\tif(resultOffset === (-1))\r\n\t\t\t\treturn resultOffset;\r\n\r\n\t\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\r\n\r\n\t\t\t\tif(currentBlockName === EndOfContent.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.isIndefiniteForm === true)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\r\n\t\t\t\t\t\treturn (-1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(currentBlockName !== OctetString.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"OCTET STRING may consists of OCTET STRINGs only\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isHexOnly = true;\r\n\r\n\t\t\tresultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\t\tthis.blockLength = inputLength;\r\n\t\t}\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tif(this.isConstructed === true)\r\n\t\t\treturn LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\r\n\r\n\t\tlet retBuf = new ArrayBuffer(this.valueHex.byteLength);\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn retBuf;\r\n\r\n\t\tif(this.valueHex.byteLength === 0)\r\n\t\t\treturn retBuf;\r\n\r\n\t\tretBuf = this.valueHex.slice(0);\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"OctetStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.isConstructed = this.isConstructed;\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class OctetString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"OctetString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalOctetStringValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 4; // OctetString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n\r\n\t\t//region Ability to encode empty OCTET STRING\r\n\t\tif(inputLength === 0)\r\n\t\t{\r\n\t\t\tif(this.idBlock.error.length === 0)\r\n\t\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"OctetString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Checking that two OCTETSTRINGs are equal\r\n\t * @param {OctetString} octetString\r\n\t */\r\n\tisEqual(octetString)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((octetString instanceof OctetString) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Compare two JSON strings\r\n\t\tif(JSON.stringify(this) !== JSON.stringify(octetString))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 BitString type class\r\n//**************************************************************************************\r\nclass LocalBitStringValueBlock extends LocalHexBlock(LocalConstructedValueBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBitStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.unusedBits = getParametersValue(parameters, \"unusedBits\", 0);\r\n\t\tthis.isConstructed = getParametersValue(parameters, \"isConstructed\", false);\r\n\t\tthis.blockLength = this.valueHex.byteLength + 1; // \"+1\" for \"unusedBits\"\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Ability to decode zero-length BitString value\r\n\t\tif(inputLength === 0)\r\n\t\t\treturn inputOffset;\r\n\t\t//endregion\r\n\r\n\t\tlet resultOffset = (-1);\r\n\r\n\t\t//region If the BISTRING supposed to be a constructed value\r\n\t\tif(this.isConstructed === true)\r\n\t\t{\r\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n\t\t\tif(resultOffset === (-1))\r\n\t\t\t\treturn resultOffset;\r\n\r\n\t\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\r\n\r\n\t\t\t\tif(currentBlockName === EndOfContent.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.isIndefiniteForm === true)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\r\n\t\t\t\t\t\treturn (-1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(currentBlockName !== BitString.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"BIT STRING may consists of BIT STRINGs only\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif((this.unusedBits > 0) && (this.value[i].unusedBits > 0))\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"Usign of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.unusedBits = this.value[i].unusedBits;\r\n\t\t\t\tif(this.unusedBits > 7)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region If the BitString supposed to be a primitive value\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\r\n\t\tthis.unusedBits = intBuffer[0];\r\n\t\tif(this.unusedBits > 7)\r\n\t\t{\r\n\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\t//region Copy input buffer to internal buffer\r\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length - 1);\r\n\t\tconst view = new Uint8Array(this.valueHex);\r\n\t\tfor(let i = 0; i < (inputLength - 1); i++)\r\n\t\t\tview[i] = intBuffer[i + 1];\r\n\t\t//endregion\r\n\r\n\t\tthis.blockLength = intBuffer.length;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tif(this.isConstructed === true)\r\n\t\t\treturn LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength + 1));\r\n\r\n\t\tif(this.valueHex.byteLength === 0)\r\n\t\t\treturn (new ArrayBuffer(0));\r\n\r\n\t\tconst curView = new Uint8Array(this.valueHex);\r\n\r\n\t\tconst retBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\r\n\t\tconst retView = new Uint8Array(retBuf);\r\n\r\n\t\tretView[0] = this.unusedBits;\r\n\r\n\t\tfor(let i = 0; i < this.valueHex.byteLength; i++)\r\n\t\t\tretView[i + 1] = curView[i];\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BitStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.unusedBits = this.unusedBits;\r\n\t\tobject.isConstructed = this.isConstructed;\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class BitString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"BitString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBitStringValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 3; // BitString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BitString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Ability to encode empty BitString\r\n\t\tif(inputLength === 0)\r\n\t\t\treturn inputOffset;\r\n\t\t//endregion\r\n\r\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n\r\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Checking that two BITSTRINGs are equal\r\n\t * @param {BitString} bitString\r\n\t */\r\n\tisEqual(bitString)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((bitString instanceof BitString) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Compare two JSON strings\r\n\t\tif(JSON.stringify(this) !== JSON.stringify(bitString))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Integer type class\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalValueBlock\r\n */\r\nclass LocalIntegerValueBlock extends LocalHexBlock(LocalValueBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalIntegerValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.valueDec = parameters.value;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Setter for \"valueHex\"\r\n\t * @param {ArrayBuffer} _value\r\n\t */\r\n\tset valueHex(_value)\r\n\t{\r\n\t\tthis._valueHex = _value.slice(0);\r\n\r\n\t\tif(_value.byteLength >= 4)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Too big Integer for decoding, hex only\");\r\n\t\t\tthis.isHexOnly = true;\r\n\t\t\tthis._valueDec = 0;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isHexOnly = false;\r\n\r\n\t\t\tif(_value.byteLength > 0)\r\n\t\t\t\tthis._valueDec = utilDecodeTC.call(this);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"valueHex\"\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\tget valueHex()\r\n\t{\r\n\t\treturn this._valueHex;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"valueDec\"\r\n\t * @param {number} _value\r\n\t */\r\n\tset valueDec(_value)\r\n\t{\r\n\t\tthis._valueDec = _value;\r\n\r\n\t\tthis.isHexOnly = false;\r\n\t\tthis._valueHex = utilEncodeTC(_value);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"valueDec\"\r\n\t * @returns {number}\r\n\t */\r\n\tget valueDec()\r\n\t{\r\n\t\treturn this._valueDec;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from DER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 DER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 DER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @param {number} [expectedLength=0] Expected length of converted \"valueHex\" buffer\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0)\r\n\t{\r\n\t\tconst offset = this.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\tif(offset === (-1))\r\n\t\t\treturn offset;\r\n\r\n\t\tconst view = new Uint8Array(this._valueHex);\r\n\r\n\t\tif((view[0] === 0x00) && ((view[1] & 0x80) !== 0))\r\n\t\t{\r\n\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\r\n\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\r\n\r\n\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(expectedLength !== 0)\r\n\t\t\t{\r\n\t\t\t\tif(this._valueHex.byteLength < expectedLength)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((expectedLength - this._valueHex.byteLength) > 1)\r\n\t\t\t\t\t\texpectedLength = this._valueHex.byteLength + 1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(expectedLength);\r\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\t\t\tupdatedView.set(view, expectedLength - this._valueHex.byteLength);\r\n\r\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn offset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (DER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoDER(sizeOnly = false)\r\n\t{\r\n\t\tconst view = new Uint8Array(this._valueHex);\r\n\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase ((view[0] & 0x80) !== 0):\r\n\t\t\t\t{\r\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength + 1);\r\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\t\t\tupdatedView[0] = 0x00;\r\n\t\t\t\t\tupdatedView.set(view, 1);\r\n\r\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\r\n\t\t\t\t{\r\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\r\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\r\n\r\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\treturn this.toBER(sizeOnly);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\tif(resultOffset === (-1))\r\n\t\t\treturn resultOffset;\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\treturn this.valueHex.slice(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"IntegerValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.valueDec = this.valueDec;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Integer extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Integer\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalIntegerValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 2; // Integer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Integer\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Compare two Integer object, or Integer and ArrayBuffer objects\r\n\t * @param {!Integer|ArrayBuffer} otherValue\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(otherValue)\r\n\t{\r\n\t\tif(otherValue instanceof Integer)\r\n\t\t{\r\n\t\t\tif(this.valueBlock.isHexOnly && otherValue.valueBlock.isHexOnly) // Compare two ArrayBuffers\r\n\t\t\t\treturn isEqualBuffer(this.valueBlock.valueHex, otherValue.valueBlock.valueHex);\r\n\r\n\t\t\tif(this.valueBlock.isHexOnly === otherValue.valueBlock.isHexOnly)\r\n\t\t\t\treturn (this.valueBlock.valueDec === otherValue.valueBlock.valueDec);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif(otherValue instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.valueBlock.valueHex, otherValue);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current Integer value from BER into DER format\r\n\t * @returns {Integer}\r\n\t */\r\n\tconvertToDER()\r\n\t{\r\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\r\n\t\tinteger.valueBlock.toDER();\r\n\r\n\t\treturn integer;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current Integer value from DER to BER format\r\n\t * @returns {Integer}\r\n\t */\r\n\tconvertFromDER()\r\n\t{\r\n\t\tconst expectedLength = Math.pow(2, nearestPowerOf2(this.valueBlock.valueHex.byteLength));\r\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\r\n\t\tinteger.valueBlock.fromDER(integer.valueBlock.valueHex, 0, integer.valueBlock.valueHex.byteLength, expectedLength);\r\n\t\t\r\n\t\treturn integer;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Enumerated type class\r\n//**************************************************************************************\r\nexport class Enumerated extends Integer\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Enumerated\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 10; // Enumerated\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Enumerated\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 ObjectIdentifier type class\r\n//**************************************************************************************\r\nclass LocalSidValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalSidValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {number} [valueDec]\r\n\t * @property {boolean} [isFirstSid]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.valueDec = getParametersValue(parameters, \"valueDec\", -1);\r\n\t\tthis.isFirstSid = getParametersValue(parameters, \"isFirstSid\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"sidBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tif(inputLength === 0)\r\n\t\t\treturn inputOffset;\r\n\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\r\n\t\tthis.valueHex = new ArrayBuffer(inputLength);\r\n\t\tlet view = new Uint8Array(this.valueHex);\r\n\r\n\t\tfor(let i = 0; i < inputLength; i++)\r\n\t\t{\r\n\t\t\tview[i] = intBuffer[i] & 0x7F;\r\n\r\n\t\t\tthis.blockLength++;\r\n\r\n\t\t\tif((intBuffer[i] & 0x80) === 0x00)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//region Ajust size of valueHex buffer\r\n\t\tconst tempValueHex = new ArrayBuffer(this.blockLength);\r\n\t\tconst tempView = new Uint8Array(tempValueHex);\r\n\r\n\t\tfor(let i = 0; i < this.blockLength; i++)\r\n\t\t\ttempView[i] = view[i];\r\n\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tthis.valueHex = tempValueHex.slice(0);\r\n\t\tview = new Uint8Array(this.valueHex);\r\n\t\t//endregion\r\n\r\n\t\tif((intBuffer[this.blockLength - 1] & 0x80) !== 0x00)\r\n\t\t{\r\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tif(view[0] === 0x00)\r\n\t\t\tthis.warnings.push(\"Needlessly long format of SID encoding\");\r\n\r\n\t\tif(this.blockLength <= 8)\r\n\t\t\tthis.valueDec = utilFromBase(view, 7);\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isHexOnly = true;\r\n\t\t\tthis.warnings.push(\"Too big SID for decoding, hex only\");\r\n\t\t}\r\n\r\n\t\treturn (inputOffset + this.blockLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet retBuf;\r\n\t\tlet retView;\r\n\t\t//endregion\r\n\r\n\t\tif(this.isHexOnly)\r\n\t\t{\r\n\t\t\tif(sizeOnly === true)\r\n\t\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength));\r\n\r\n\t\t\tconst curView = new Uint8Array(this.valueHex);\r\n\r\n\t\t\tretBuf = new ArrayBuffer(this.blockLength);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tfor(let i = 0; i < (this.blockLength - 1); i++)\r\n\t\t\t\tretView[i] = curView[i] | 0x80;\r\n\r\n\t\t\tretView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tconst encodedBuf = utilToBase(this.valueDec, 7);\r\n\t\tif(encodedBuf.byteLength === 0)\r\n\t\t{\r\n\t\t\tthis.error = \"Error during encoding SID value\";\r\n\t\t\treturn (new ArrayBuffer(0));\r\n\t\t}\r\n\r\n\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength);\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t{\r\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tfor(let i = 0; i < (encodedBuf.byteLength - 1); i++)\r\n\t\t\t\tretView[i] = encodedView[i] | 0x80;\r\n\r\n\t\t\tretView[encodedBuf.byteLength - 1] = encodedView[encodedBuf.byteLength - 1];\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create string representation of current SID block\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tlet result = \"\";\r\n\r\n\t\tif(this.isHexOnly === true)\r\n\t\t\tresult = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(this.isFirstSid)\r\n\t\t\t{\r\n\t\t\t\tlet sidValue = this.valueDec;\r\n\r\n\t\t\t\tif(this.valueDec <= 39)\r\n\t\t\t\t\tresult = \"0.\";\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.valueDec <= 79)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = \"1.\";\r\n\t\t\t\t\t\tsidValue -= 40;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = \"2.\";\r\n\t\t\t\t\t\tsidValue -= 80;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = result + sidValue.toString();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tresult = this.valueDec.toString();\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.valueDec = this.valueDec;\r\n\t\tobject.isFirstSid = this.isFirstSid;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nclass LocalObjectIdentifierValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalObjectIdentifierValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.fromString(getParametersValue(parameters, \"value\", \"\"));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tlet resultOffset = inputOffset;\r\n\r\n\t\twhile(inputLength > 0)\r\n\t\t{\r\n\t\t\tconst sidBlock = new LocalSidValueBlock();\r\n\t\t\tresultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n\t\t\tif(resultOffset === (-1))\r\n\t\t\t{\r\n\t\t\t\tthis.blockLength = 0;\r\n\t\t\t\tthis.error = sidBlock.error;\r\n\t\t\t\treturn resultOffset;\r\n\t\t\t}\r\n\r\n\t\t\tif(this.value.length === 0)\r\n\t\t\t\tsidBlock.isFirstSid = true;\r\n\r\n\t\t\tthis.blockLength += sidBlock.blockLength;\r\n\t\t\tinputLength -= sidBlock.blockLength;\r\n\r\n\t\t\tthis.value.push(sidBlock);\r\n\t\t}\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tlet retBuf = new ArrayBuffer(0);\r\n\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t{\r\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\r\n\t\t\tif(valueBuf.byteLength === 0)\r\n\t\t\t{\r\n\t\t\t\tthis.error = this.value[i].error;\r\n\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t\t}\r\n\r\n\t\t\tretBuf = utilConcatBuf(retBuf, valueBuf);\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create \"LocalObjectIdentifierValueBlock\" class from string\r\n\t * @param {string} string Input string to convert from\r\n\t * @returns {boolean}\r\n\t */\r\n\tfromString(string)\r\n\t{\r\n\t\tthis.value = []; // Clear existing SID values\r\n\r\n\t\tlet pos1 = 0;\r\n\t\tlet pos2 = 0;\r\n\r\n\t\tlet sid = \"\";\r\n\r\n\t\tlet flag = false;\r\n\r\n\t\tdo\r\n\t\t{\r\n\t\t\tpos2 = string.indexOf(\".\", pos1);\r\n\t\t\tif(pos2 === (-1))\r\n\t\t\t\tsid = string.substr(pos1);\r\n\t\t\telse\r\n\t\t\t\tsid = string.substr(pos1, pos2 - pos1);\r\n\r\n\t\t\tpos1 = pos2 + 1;\r\n\r\n\t\t\tif(flag)\r\n\t\t\t{\r\n\t\t\t\tconst sidBlock = this.value[0];\r\n\r\n\t\t\t\tlet plus = 0;\r\n\r\n\t\t\t\tswitch(sidBlock.valueDec)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tplus = 40;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tplus = 80;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthis.value = []; // clear SID array\r\n\t\t\t\t\t\treturn false; // ???\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst parsedSID = parseInt(sid, 10);\r\n\t\t\t\tif(isNaN(parsedSID))\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\tsidBlock.valueDec = parsedSID + plus;\r\n\r\n\t\t\t\tflag = false;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tconst sidBlock = new LocalSidValueBlock();\r\n\t\t\t\tsidBlock.valueDec = parseInt(sid, 10);\r\n\t\t\t\tif(isNaN(sidBlock.valueDec))\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\tif(this.value.length === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tsidBlock.isFirstSid = true;\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.value.push(sidBlock);\r\n\t\t\t}\r\n\t\t} while(pos2 !== (-1));\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Converts \"LocalObjectIdentifierValueBlock\" class to string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\tlet isHexOnly = false;\r\n\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t{\r\n\t\t\tisHexOnly = this.value[i].isHexOnly;\r\n\r\n\t\t\tlet sidStr = this.value[i].toString();\r\n\r\n\t\t\tif(i !== 0)\r\n\t\t\t\tresult = `${result}.`;\r\n\r\n\t\t\tif(isHexOnly)\r\n\t\t\t{\r\n\t\t\t\tsidStr = `{${sidStr}}`;\r\n\r\n\t\t\t\tif(this.value[i].isFirstSid)\r\n\t\t\t\t\tresult = `2.{${sidStr} - 80}`;\r\n\t\t\t\telse\r\n\t\t\t\t\tresult = result + sidStr;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tresult = result + sidStr;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"ObjectIdentifierValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.toString();\r\n\t\tobject.sidArray = [];\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\tobject.sidArray.push(this.value[i].toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class ObjectIdentifier extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"ObjectIdentifier\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalObjectIdentifierValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 6; // OBJECT IDENTIFIER\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"ObjectIdentifier\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of all string's classes\r\n//**************************************************************************************\r\nclass LocalUtf8StringValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Constructor for \"LocalUtf8StringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isHexOnly = true;\r\n\t\tthis.value = \"\"; // String representation of decoded ArrayBuffer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Utf8StringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class Utf8String extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Utf8String\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalUtf8StringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 12; // Utf8String\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Utf8String\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\t//noinspection JSDeprecatedSymbols\r\n\t\t\tthis.valueBlock.value = decodeURIComponent(escape(this.valueBlock.value));\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tthis.warnings.push(`Error during \\\"decodeURIComponent\\\": ${ex}, using raw string`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\t//noinspection JSDeprecatedSymbols\r\n\t\tconst str = unescape(encodeURIComponent(inputString));\r\n\t\tconst strLen = str.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\r\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLen; i++)\r\n\t\t\tview[i] = str.charCodeAt(i);\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalBaseBlock\r\n * @extends LocalHexBlock\r\n */\r\nclass LocalBmpStringValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBmpStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isHexOnly = true;\r\n\t\tthis.value = \"\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BmpStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class BmpString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"BmpString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBmpStringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 30; // BmpString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BmpString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tconst copyBuffer = inputBuffer.slice(0);\r\n\t\tconst valueView = new Uint8Array(copyBuffer);\r\n\r\n\t\tfor(let i = 0; i < valueView.length; i = i + 2)\r\n\t\t{\r\n\t\t\tconst temp = valueView[i];\r\n\r\n\t\t\tvalueView[i] = valueView[i + 1];\r\n\t\t\tvalueView[i + 1] = temp;\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint16Array(copyBuffer));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\tconst strLength = inputString.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 2);\r\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLength; i++)\r\n\t\t{\r\n\t\t\tconst codeBuf = utilToBase(inputString.charCodeAt(i), 8);\r\n\t\t\tconst codeView = new Uint8Array(codeBuf);\r\n\t\t\tif(codeView.length > 2)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tconst dif = 2 - codeView.length;\r\n\r\n\t\t\tfor(let j = (codeView.length - 1); j >= 0; j--)\r\n\t\t\t\tvalueHexView[i * 2 + j + dif] = codeView[j];\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nclass LocalUniversalStringValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalUniversalStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isHexOnly = true;\r\n\t\tthis.value = \"\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"UniversalStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class UniversalString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"UniversalString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalUniversalStringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 28; // UniversalString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"UniversalString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tconst copyBuffer = inputBuffer.slice(0);\r\n\t\tconst valueView = new Uint8Array(copyBuffer);\r\n\r\n\t\tfor(let i = 0; i < valueView.length; i = i + 4)\r\n\t\t{\r\n\t\t\tvalueView[i] = valueView[i + 3];\r\n\t\t\tvalueView[i + 1] = valueView[i + 2];\r\n\t\t\tvalueView[i + 2] = 0x00;\r\n\t\t\tvalueView[i + 3] = 0x00;\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\tconst strLength = inputString.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 4);\r\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLength; i++)\r\n\t\t{\r\n\t\t\tconst codeBuf = utilToBase(inputString.charCodeAt(i), 8);\r\n\t\t\tconst codeView = new Uint8Array(codeBuf);\r\n\t\t\tif(codeView.length > 4)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tconst dif = 4 - codeView.length;\r\n\r\n\t\t\tfor(let j = (codeView.length - 1); j >= 0; j--)\r\n\t\t\t\tvalueHexView[i * 4 + j + dif] = codeView[j];\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nclass LocalSimpleStringValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalSimpleStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.value = \"\";\r\n\t\tthis.isHexOnly = true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"SimpleStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nclass LocalSimpleStringBlock extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalSimpleStringBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalSimpleStringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"SIMPLESTRING\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\tconst strLen = inputString.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\r\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLen; i++)\r\n\t\t\tview[i] = inputString.charCodeAt(i);\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class NumericString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"NumericString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 18; // NumericString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"NumericString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class PrintableString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"PrintableString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 19; // PrintableString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"PrintableString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class TeletexString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"TeletexString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 20; // TeletexString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"TeletexString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class VideotexString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"VideotexString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 21; // VideotexString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"VideotexString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class IA5String extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"IA5String\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 22; // IA5String\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"IA5String\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class GraphicString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"GraphicString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 25; // GraphicString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"GraphicString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class VisibleString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"VisibleString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 26; // VisibleString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"VisibleString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class GeneralString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"GeneralString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 27; // GeneralString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"GeneralString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class CharacterString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"CharacterString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 29; // CharacterString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"CharacterString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of all date and time classes\r\n//**************************************************************************************\r\n/**\r\n * @extends VisibleString\r\n */\r\nexport class UTCTime extends VisibleString\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"UTCTime\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [value] String representatio of the date\r\n\t * @property {Date} [valueDate] JavaScript \"Date\" object\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.year = 0;\r\n\t\tthis.month = 0;\r\n\t\tthis.day = 0;\r\n\t\tthis.hour = 0;\r\n\t\tthis.minute = 0;\r\n\t\tthis.second = 0;\r\n\r\n\t\t//region Create UTCTime from ASN.1 UTC string value\r\n\t\tif(\"value\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\r\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\t\tfor(let i = 0; i < parameters.value.length; i++)\r\n\t\t\t\tview[i] = parameters.value.charCodeAt(i);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create GeneralizedTime from JavaScript Date type\r\n\t\tif(\"valueDate\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromDate(parameters.valueDate);\r\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 23; // UTCTime\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal string into ArrayBuffer\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBuffer()\r\n\t{\r\n\t\tconst str = this.toString();\r\n\r\n\t\tconst buffer = new ArrayBuffer(str.length);\r\n\t\tconst view = new Uint8Array(buffer);\r\n\r\n\t\tfor(let i = 0; i < str.length; i++)\r\n\t\t\tview[i] = str.charCodeAt(i);\r\n\r\n\t\treturn buffer;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting \"Date\" object into ASN.1 internal string\r\n\t * @param {!Date} inputDate JavaScript \"Date\" object\r\n\t */\r\n\tfromDate(inputDate)\r\n\t{\r\n\t\tthis.year = inputDate.getUTCFullYear();\r\n\t\tthis.month = inputDate.getUTCMonth() + 1;\r\n\t\tthis.day = inputDate.getUTCDate();\r\n\t\tthis.hour = inputDate.getUTCHours();\r\n\t\tthis.minute = inputDate.getUTCMinutes();\r\n\t\tthis.second = inputDate.getUTCSeconds();\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Function converting ASN.1 internal string into \"Date\" object\r\n\t * @returns {Date}\r\n\t */\r\n\ttoDate()\r\n\t{\r\n\t\treturn (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\t//region Parse input string\r\n\t\tconst parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\r\n\t\tconst parserArray = parser.exec(inputString);\r\n\t\tif(parserArray === null)\r\n\t\t{\r\n\t\t\tthis.error = \"Wrong input string for convertion\";\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Store parsed values\r\n\t\tconst year = parseInt(parserArray[1], 10);\r\n\t\tif(year >= 50)\r\n\t\t\tthis.year = 1900 + year;\r\n\t\telse\r\n\t\t\tthis.year = 2000 + year;\r\n\r\n\t\tthis.month = parseInt(parserArray[2], 10);\r\n\t\tthis.day = parseInt(parserArray[3], 10);\r\n\t\tthis.hour = parseInt(parserArray[4], 10);\r\n\t\tthis.minute = parseInt(parserArray[5], 10);\r\n\t\tthis.second = parseInt(parserArray[6], 10);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal class into JavaScript string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tconst outputArray = new Array(7);\r\n\r\n\t\toutputArray[0] = padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\r\n\t\toutputArray[1] = padNumber(this.month, 2);\r\n\t\toutputArray[2] = padNumber(this.day, 2);\r\n\t\toutputArray[3] = padNumber(this.hour, 2);\r\n\t\toutputArray[4] = padNumber(this.minute, 2);\r\n\t\toutputArray[5] = padNumber(this.second, 2);\r\n\t\toutputArray[6] = \"Z\";\r\n\r\n\t\treturn outputArray.join(\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"UTCTime\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.year = this.year;\r\n\t\tobject.month = this.month;\r\n\t\tobject.day = this.day;\r\n\t\tobject.hour = this.hour;\r\n\t\tobject.minute = this.minute;\r\n\t\tobject.second = this.second;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends VisibleString\r\n */\r\nexport class GeneralizedTime extends VisibleString\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"GeneralizedTime\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [value] String representatio of the date\r\n\t * @property {Date} [valueDate] JavaScript \"Date\" object\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.year = 0;\r\n\t\tthis.month = 0;\r\n\t\tthis.day = 0;\r\n\t\tthis.hour = 0;\r\n\t\tthis.minute = 0;\r\n\t\tthis.second = 0;\r\n\t\tthis.millisecond = 0;\r\n\r\n\t\t//region Create UTCTime from ASN.1 UTC string value\r\n\t\tif(\"value\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\r\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\t\tfor(let i = 0; i < parameters.value.length; i++)\r\n\t\t\t\tview[i] = parameters.value.charCodeAt(i);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create GeneralizedTime from JavaScript Date type\r\n\t\tif(\"valueDate\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromDate(parameters.valueDate);\r\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 24; // GeneralizedTime\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal string into ArrayBuffer\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBuffer()\r\n\t{\r\n\t\tconst str = this.toString();\r\n\r\n\t\tconst buffer = new ArrayBuffer(str.length);\r\n\t\tconst view = new Uint8Array(buffer);\r\n\r\n\t\tfor(let i = 0; i < str.length; i++)\r\n\t\t\tview[i] = str.charCodeAt(i);\r\n\r\n\t\treturn buffer;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting \"Date\" object into ASN.1 internal string\r\n\t * @param {!Date} inputDate JavaScript \"Date\" object\r\n\t */\r\n\tfromDate(inputDate)\r\n\t{\r\n\t\tthis.year = inputDate.getUTCFullYear();\r\n\t\tthis.month = inputDate.getUTCMonth() + 1;\r\n\t\tthis.day = inputDate.getUTCDate();\r\n\t\tthis.hour = inputDate.getUTCHours();\r\n\t\tthis.minute = inputDate.getUTCMinutes();\r\n\t\tthis.second = inputDate.getUTCSeconds();\r\n\t\tthis.millisecond = inputDate.getUTCMilliseconds();\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Function converting ASN.1 internal string into \"Date\" object\r\n\t * @returns {Date}\r\n\t */\r\n\ttoDate()\r\n\t{\r\n\t\treturn (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet isUTC = false;\r\n\r\n\t\tlet timeString = \"\";\r\n\t\tlet dateTimeString = \"\";\r\n\t\tlet fractionPart = 0;\r\n\r\n\t\tlet parser;\r\n\r\n\t\tlet hourDifference = 0;\r\n\t\tlet minuteDifference = 0;\r\n\t\t//endregion\r\n\r\n\t\t//region Convert as UTC time\r\n\t\tif(inputString[inputString.length - 1] === \"Z\")\r\n\t\t{\r\n\t\t\ttimeString = inputString.substr(0, inputString.length - 1);\r\n\r\n\t\t\tisUTC = true;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Convert as local time\r\n\t\telse\r\n\t\t{\r\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\tconst number = new Number(inputString[inputString.length - 1]);\r\n\r\n\t\t\tif(isNaN(number.valueOf()))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\ttimeString = inputString;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Check that we do not have a \"+\" and \"-\" symbols inside UTC time\r\n\t\tif(isUTC)\r\n\t\t{\r\n\t\t\tif(timeString.indexOf(\"+\") !== (-1))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\tif(timeString.indexOf(\"-\") !== (-1))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Get \"UTC time difference\" in case of local time\r\n\t\telse\r\n\t\t{\r\n\t\t\tlet multiplier = 1;\r\n\t\t\tlet differencePosition = timeString.indexOf(\"+\");\r\n\t\t\tlet differenceString = \"\";\r\n\r\n\t\t\tif(differencePosition === (-1))\r\n\t\t\t{\r\n\t\t\t\tdifferencePosition = timeString.indexOf(\"-\");\r\n\t\t\t\tmultiplier = (-1);\r\n\t\t\t}\r\n\r\n\t\t\tif(differencePosition !== (-1))\r\n\t\t\t{\r\n\t\t\t\tdifferenceString = timeString.substr(differencePosition + 1);\r\n\t\t\t\ttimeString = timeString.substr(0, differencePosition);\r\n\r\n\t\t\t\tif((differenceString.length !== 2) && (differenceString.length !== 4))\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\t\tlet number = new Number(differenceString.substr(0, 2));\r\n\r\n\t\t\t\tif(isNaN(number.valueOf()))\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\t\thourDifference = multiplier * number;\r\n\r\n\t\t\t\tif(differenceString.length === 4)\r\n\t\t\t\t{\r\n\t\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\t\t\tnumber = new Number(differenceString.substr(2, 2));\r\n\r\n\t\t\t\t\tif(isNaN(number.valueOf()))\r\n\t\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\t\t\tminuteDifference = multiplier * number;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get position of fraction point\r\n\t\tlet fractionPointPosition = timeString.indexOf(\".\"); // Check for \"full stop\" symbol\r\n\t\tif(fractionPointPosition === (-1))\r\n\t\t\tfractionPointPosition = timeString.indexOf(\",\"); // Check for \"comma\" symbol\r\n\t\t//endregion\r\n\r\n\t\t//region Get fraction part\r\n\t\tif(fractionPointPosition !== (-1))\r\n\t\t{\r\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\tconst fractionPartCheck = new Number(`0${timeString.substr(fractionPointPosition)}`);\r\n\r\n\t\t\tif(isNaN(fractionPartCheck.valueOf()))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\tfractionPart = fractionPartCheck.valueOf();\r\n\r\n\t\t\tdateTimeString = timeString.substr(0, fractionPointPosition);\r\n\t\t}\r\n\t\telse\r\n\t\t\tdateTimeString = timeString;\r\n\t\t//endregion\r\n\r\n\t\t//region Parse internal date\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase (dateTimeString.length === 8): // \"YYYYMMDD\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})/ig;\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\"); // Here we should not have a \"fraction point\"\r\n\t\t\t\tbreak;\r\n\t\t\tcase (dateTimeString.length === 10): // \"YYYYMMDDHH\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t{\r\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\r\n\t\t\t\t\tthis.minute = Math.floor(fractionResult);\r\n\r\n\t\t\t\t\tfractionResult = 60 * (fractionResult - this.minute);\r\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\r\n\r\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\r\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase (dateTimeString.length === 12): // \"YYYYMMDDHHMM\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t{\r\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\r\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\r\n\r\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\r\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase (dateTimeString.length === 14): // \"YYYYMMDDHHMMSS\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t{\r\n\t\t\t\t\tconst fractionResult = 1000 * fractionPart;\r\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Put parsed values at right places\r\n\t\tconst parserArray = parser.exec(dateTimeString);\r\n\t\tif(parserArray === null)\r\n\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\tfor(let j = 1; j < parserArray.length; j++)\r\n\t\t{\r\n\t\t\tswitch(j)\r\n\t\t\t{\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.year = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tthis.month = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tthis.day = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tthis.hour = parseInt(parserArray[j], 10) + hourDifference;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tthis.minute = parseInt(parserArray[j], 10) + minuteDifference;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tthis.second = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get final date\r\n\t\tif(isUTC === false)\r\n\t\t{\r\n\t\t\tconst tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\r\n\r\n\t\t\tthis.year = tempDate.getUTCFullYear();\r\n\t\t\tthis.month = tempDate.getUTCMonth();\r\n\t\t\tthis.day = tempDate.getUTCDay();\r\n\t\t\tthis.hour = tempDate.getUTCHours();\r\n\t\t\tthis.minute = tempDate.getUTCMinutes();\r\n\t\t\tthis.second = tempDate.getUTCSeconds();\r\n\t\t\tthis.millisecond = tempDate.getUTCMilliseconds();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal class into JavaScript string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(padNumber(this.year, 4));\r\n\t\toutputArray.push(padNumber(this.month, 2));\r\n\t\toutputArray.push(padNumber(this.day, 2));\r\n\t\toutputArray.push(padNumber(this.hour, 2));\r\n\t\toutputArray.push(padNumber(this.minute, 2));\r\n\t\toutputArray.push(padNumber(this.second, 2));\r\n\t\tif(this.millisecond !== 0)\r\n\t\t{\r\n\t\t\toutputArray.push(\".\");\r\n\t\t\toutputArray.push(padNumber(this.millisecond, 3));\r\n\t\t}\r\n\t\toutputArray.push(\"Z\");\r\n\r\n\t\treturn outputArray.join(\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"GeneralizedTime\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.year = this.year;\r\n\t\tobject.month = this.month;\r\n\t\tobject.day = this.day;\r\n\t\tobject.hour = this.hour;\r\n\t\tobject.minute = this.minute;\r\n\t\tobject.second = this.second;\r\n\t\tobject.millisecond = this.millisecond;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class DATE extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"DATE\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 31; // DATE\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"DATE\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class TimeOfDay extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"TimeOfDay\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 32; // TimeOfDay\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"TimeOfDay\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class DateTime extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"DateTime\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 33; // DateTime\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"DateTime\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class Duration extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Duration\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 34; // Duration\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Duration\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class TIME extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Time\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 14; // Time\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"TIME\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type Choice\r\n//**************************************************************************************\r\nexport class Choice\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Choice\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Array} [value] Array of ASN.1 types for make a choice from\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.value = getParametersValue(parameters, \"value\", []);\r\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type Any\r\n//**************************************************************************************\r\nexport class Any\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Any\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type Repeated\r\n//**************************************************************************************\r\nexport class Repeated\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Repeated\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\r\n\t\tthis.value = getParametersValue(parameters, \"value\", new Any());\r\n\t\tthis.local = getParametersValue(parameters, \"local\", false); // Could local or global array to store elements\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type RawData\r\n//**************************************************************************************\r\n/**\r\n * @description Special class providing ability to have \"toBER/fromBER\" for raw ArrayBuffer\r\n */\r\nexport class RawData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Repeated\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.data = getParametersValue(parameters, \"data\", new ArrayBuffer(0));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tthis.data = inputBuffer.slice(inputOffset, inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn this.data;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Major ASN.1 BER decoding function\r\n//**************************************************************************************\r\n/**\r\n * Internal library function for decoding ASN.1 BER\r\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n * @returns {{offset: number, result: Object}}\r\n */\r\nfunction LocalFromBER(inputBuffer, inputOffset, inputLength)\r\n{\r\n\tconst incomingOffset = inputOffset; // Need to store initial offset since \"inputOffset\" is changing in the function\r\n\r\n\t//region Local function changing a type for ASN.1 classes\r\n\tfunction localChangeType(inputObject, newType)\r\n\t{\r\n\t\tif(inputObject instanceof newType)\r\n\t\t\treturn inputObject;\r\n\r\n\t\tconst newObject = new newType();\r\n\t\tnewObject.idBlock = inputObject.idBlock;\r\n\t\tnewObject.lenBlock = inputObject.lenBlock;\r\n\t\tnewObject.warnings = inputObject.warnings;\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tnewObject.valueBeforeDecode = inputObject.valueBeforeDecode.slice(0);\r\n\r\n\t\treturn newObject;\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Create a basic ASN.1 type since we need to return errors and warnings from the function\r\n\tlet returnObject = new BaseBlock({}, Object);\r\n\t//endregion\r\n\r\n\t//region Basic check for parameters\r\n\tif(checkBufferParams(new LocalBaseBlock(), inputBuffer, inputOffset, inputLength) === false)\r\n\t{\r\n\t\treturnObject.error = \"Wrong input parameters\";\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Getting Uint8Array from ArrayBuffer\r\n\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t//endregion\r\n\r\n\t//region Initial checks\r\n\tif(intBuffer.length === 0)\r\n\t{\r\n\t\tthis.error = \"Zero buffer length\";\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Decode indentifcation block of ASN.1 BER structure\r\n\tlet resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n\treturnObject.warnings.concat(returnObject.idBlock.warnings);\r\n\tif(resultOffset === (-1))\r\n\t{\r\n\t\treturnObject.error = returnObject.idBlock.error;\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\r\n\tinputOffset = resultOffset;\r\n\tinputLength -= returnObject.idBlock.blockLength;\r\n\t//endregion\r\n\r\n\t//region Decode length block of ASN.1 BER structure\r\n\tresultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n\treturnObject.warnings.concat(returnObject.lenBlock.warnings);\r\n\tif(resultOffset === (-1))\r\n\t{\r\n\t\treturnObject.error = returnObject.lenBlock.error;\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\r\n\tinputOffset = resultOffset;\r\n\tinputLength -= returnObject.lenBlock.blockLength;\r\n\t//endregion\r\n\r\n\t//region Check for usign indefinite length form in encoding for primitive types\r\n\tif((returnObject.idBlock.isConstructed === false) &&\r\n\t\t(returnObject.lenBlock.isIndefiniteForm === true))\r\n\t{\r\n\t\treturnObject.error = \"Indefinite length form used for primitive encoding form\";\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Switch ASN.1 block type\r\n\tlet newASN1Type = BaseBlock;\r\n\r\n\tswitch(returnObject.idBlock.tagClass)\r\n\t{\r\n\t\t//region UNIVERSAL\r\n\t\tcase 1:\r\n\t\t\t//region Check for reserved tag numbers\r\n\t\t\tif((returnObject.idBlock.tagNumber >= 37) &&\r\n\t\t\t\t(returnObject.idBlock.isHexOnly === false))\r\n\t\t\t{\r\n\t\t\t\treturnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\r\n\t\t\t\treturn {\r\n\t\t\t\t\toffset: (-1),\r\n\t\t\t\t\tresult: returnObject\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\tswitch(returnObject.idBlock.tagNumber)\r\n\t\t\t{\r\n\t\t\t\t//region EndOfContent type\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t//region Check for EndOfContent type\r\n\t\t\t\t\tif((returnObject.idBlock.isConstructed === true) &&\r\n\t\t\t\t\t\t(returnObject.lenBlock.length > 0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturnObject.error = \"Type [UNIVERSAL 0] is reserved\";\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\toffset: (-1),\r\n\t\t\t\t\t\t\tresult: returnObject\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\tnewASN1Type = EndOfContent;\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Boolean type\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tnewASN1Type = Boolean;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Integer type\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tnewASN1Type = Integer;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region BitString type\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tnewASN1Type = BitString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region OctetString type\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tnewASN1Type = OctetString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Null type\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tnewASN1Type = Null;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region OBJECT IDENTIFIER type\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tnewASN1Type = ObjectIdentifier;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Enumerated type\r\n\t\t\t\tcase 10:\r\n\t\t\t\t\tnewASN1Type = Enumerated;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Utf8String type\r\n\t\t\t\tcase 12:\r\n\t\t\t\t\tnewASN1Type = Utf8String;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Time type\r\n\t\t\t\tcase 14:\r\n\t\t\t\t\tnewASN1Type = TIME;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region ASN.1 reserved type\r\n\t\t\t\tcase 15:\r\n\t\t\t\t\treturnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\toffset: (-1),\r\n\t\t\t\t\t\tresult: returnObject\r\n\t\t\t\t\t};\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Sequence type\r\n\t\t\t\tcase 16:\r\n\t\t\t\t\tnewASN1Type = Sequence;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Set type\r\n\t\t\t\tcase 17:\r\n\t\t\t\t\tnewASN1Type = Set;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region NumericString type\r\n\t\t\t\tcase 18:\r\n\t\t\t\t\tnewASN1Type = NumericString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region PrintableString type\r\n\t\t\t\tcase 19:\r\n\t\t\t\t\tnewASN1Type = PrintableString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region TeletexString type\r\n\t\t\t\tcase 20:\r\n\t\t\t\t\tnewASN1Type = TeletexString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region VideotexString type\r\n\t\t\t\tcase 21:\r\n\t\t\t\t\tnewASN1Type = VideotexString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region IA5String type\r\n\t\t\t\tcase 22:\r\n\t\t\t\t\tnewASN1Type = IA5String;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region UTCTime type\r\n\t\t\t\tcase 23:\r\n\t\t\t\t\tnewASN1Type = UTCTime;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region GeneralizedTime type\r\n\t\t\t\tcase 24:\r\n\t\t\t\t\tnewASN1Type = GeneralizedTime;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region GraphicString type\r\n\t\t\t\tcase 25:\r\n\t\t\t\t\tnewASN1Type = GraphicString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region VisibleString type\r\n\t\t\t\tcase 26:\r\n\t\t\t\t\tnewASN1Type = VisibleString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region GeneralString type\r\n\t\t\t\tcase 27:\r\n\t\t\t\t\tnewASN1Type = GeneralString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region UniversalString type\r\n\t\t\t\tcase 28:\r\n\t\t\t\t\tnewASN1Type = UniversalString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region CharacterString type\r\n\t\t\t\tcase 29:\r\n\t\t\t\t\tnewASN1Type = CharacterString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region BmpString type\r\n\t\t\t\tcase 30:\r\n\t\t\t\t\tnewASN1Type = BmpString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region DATE type\r\n\t\t\t\tcase 31:\r\n\t\t\t\t\tnewASN1Type = DATE;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region TimeOfDay type\r\n\t\t\t\tcase 32:\r\n\t\t\t\t\tnewASN1Type = TimeOfDay;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Date-Time type\r\n\t\t\t\tcase 33:\r\n\t\t\t\t\tnewASN1Type = DateTime;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Duration type\r\n\t\t\t\tcase 34:\r\n\t\t\t\t\tnewASN1Type = Duration;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region default\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet newObject;\r\n\r\n\t\t\t\t\t\tif(returnObject.idBlock.isConstructed === true)\r\n\t\t\t\t\t\t\tnewObject = new Constructed();\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tnewObject = new Primitive();\r\n\r\n\t\t\t\t\t\tnewObject.idBlock = returnObject.idBlock;\r\n\t\t\t\t\t\tnewObject.lenBlock = returnObject.lenBlock;\r\n\t\t\t\t\t\tnewObject.warnings = returnObject.warnings;\r\n\r\n\t\t\t\t\t\treturnObject = newObject;\r\n\r\n\t\t\t\t\t\tresultOffset = returnObject.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t//endregion\r\n\t\t//region All other tag classes\r\n\t\tcase 2: // APPLICATION\r\n\t\tcase 3: // CONTEXT-SPECIFIC\r\n\t\tcase 4: // PRIVATE\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\tif(returnObject.idBlock.isConstructed === true)\r\n\t\t\t\t\tnewASN1Type = Constructed;\r\n\t\t\t\telse\r\n\t\t\t\t\tnewASN1Type = Primitive;\r\n\t\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Change type and perform BER decoding\r\n\treturnObject = localChangeType(returnObject, newASN1Type);\r\n\tresultOffset = returnObject.fromBER(inputBuffer, inputOffset, (returnObject.lenBlock.isIndefiniteForm === true) ? inputLength : returnObject.lenBlock.length);\r\n\t//endregion\r\n\r\n\t//region Coping incoming buffer for entire ASN.1 block\r\n\treturnObject.valueBeforeDecode = inputBuffer.slice(incomingOffset, incomingOffset + returnObject.blockLength);\r\n\t//endregion\r\n\r\n\treturn {\r\n\t\toffset: resultOffset,\r\n\t\tresult: returnObject\r\n\t};\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Major function for decoding ASN.1 BER array into internal library structuries\r\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array of bytes\r\n */\r\nexport function fromBER(inputBuffer)\r\n{\r\n\tif(inputBuffer.byteLength === 0)\r\n\t{\r\n\t\tconst result = new BaseBlock({}, Object);\r\n\t\tresult.error = \"Input buffer has zero length\";\r\n\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult\r\n\t\t};\r\n\t}\r\n\r\n\treturn LocalFromBER(inputBuffer, 0, inputBuffer.byteLength);\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Major scheme verification function\r\n//**************************************************************************************\r\n/**\r\n * Compare of two ASN.1 object trees\r\n * @param {!Object} root Root of input ASN.1 object tree\r\n * @param {!Object} inputData Input ASN.1 object tree\r\n * @param {!Object} inputSchema Input ASN.1 schema to compare with\r\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\r\n */\r\nexport function compareSchema(root, inputData, inputSchema)\r\n{\r\n\t//region Special case for Choice schema element type\r\n\tif(inputSchema instanceof Choice)\r\n\t{\r\n\t\tconst choiceResult = false;\r\n\r\n\t\tfor(let j = 0; j < inputSchema.value.length; j++)\r\n\t\t{\r\n\t\t\tconst result = compareSchema(root, inputData, inputSchema.value[j]);\r\n\t\t\tif(result.verified === true)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tverified: true,\r\n\t\t\t\t\tresult: root\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(choiceResult === false)\r\n\t\t{\r\n\t\t\tconst _result = {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: {\r\n\t\t\t\t\terror: \"Wrong values for Choice type\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t_result.name = inputSchema.name;\r\n\r\n\t\t\treturn _result;\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Special case for Any schema element type\r\n\tif(inputSchema instanceof Any)\r\n\t{\r\n\t\t//region Add named component of ASN.1 schema\r\n\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\troot[inputSchema.name] = inputData;\r\n\t\t//endregion\r\n\r\n\t\treturn {\r\n\t\t\tverified: true,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Initial check\r\n\tif((root instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong root object\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((inputData instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 data\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((inputSchema instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((\"idBlock\" in inputSchema) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Comparing idBlock properties in ASN.1 data and ASN.1 schema\r\n\t//region Encode and decode ASN.1 schema idBlock\r\n\t/// <remarks>This encoding/decoding is neccessary because could be an errors in schema definition</remarks>\r\n\tif((\"fromBER\" in inputSchema.idBlock) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((\"toBER\" in inputSchema.idBlock) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tconst encodedId = inputSchema.idBlock.toBER(false);\r\n\tif(encodedId.byteLength === 0)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Error encoding idBlock for ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tconst decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\r\n\tif(decodedOffset === (-1))\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Error decoding idBlock for ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region tagClass\r\n\tif(inputSchema.idBlock.hasOwnProperty(\"tagClass\") === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region tagNumber\r\n\tif(inputSchema.idBlock.hasOwnProperty(\"tagNumber\") === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region isConstructed\r\n\tif(inputSchema.idBlock.hasOwnProperty(\"isConstructed\") === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region isHexOnly\r\n\tif((\"isHexOnly\" in inputSchema.idBlock) === false) // Since 'isHexOnly' is an inhirited property\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region valueHex\r\n\tif(inputSchema.idBlock.isHexOnly === true)\r\n\t{\r\n\t\tif((\"valueHex\" in inputSchema.idBlock) === false) // Since 'valueHex' is an inhirited property\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst schemaView = new Uint8Array(inputSchema.idBlock.valueHex);\r\n\t\tconst asn1View = new Uint8Array(inputData.idBlock.valueHex);\r\n\r\n\t\tif(schemaView.length !== asn1View.length)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tfor(let i = 0; i < schemaView.length; i++)\r\n\t\t{\r\n\t\t\tif(schemaView[i] !== asn1View[1])\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tverified: false,\r\n\t\t\t\t\tresult: root\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n\t//endregion\r\n\r\n\t//region Add named component of ASN.1 schema\r\n\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t{\r\n\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\tif(inputSchema.name !== \"\")\r\n\t\t\troot[inputSchema.name] = inputData;\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Getting next ASN.1 block for comparition\r\n\tif(inputSchema.idBlock.isConstructed === true)\r\n\t{\r\n\t\tlet admission = 0;\r\n\t\tlet result = { verified: false };\r\n\r\n\t\tlet maxLength = inputSchema.valueBlock.value.length;\r\n\r\n\t\tif(maxLength > 0)\r\n\t\t{\r\n\t\t\tif(inputSchema.valueBlock.value[0] instanceof Repeated)\r\n\t\t\t\tmaxLength = inputData.valueBlock.value.length;\r\n\t\t}\r\n\r\n\t\t//region Special case when constructive value has no elements\r\n\t\tif(maxLength === 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tverified: true,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Special case when \"inputData\" has no values and \"inputSchema\" has all optional values\r\n\t\tif((inputData.valueBlock.value.length === 0) &&\r\n\t\t\t(inputSchema.valueBlock.value.length !== 0))\r\n\t\t{\r\n\t\t\tlet _optional = true;\r\n\r\n\t\t\tfor(let i = 0; i < inputSchema.valueBlock.value.length; i++)\r\n\t\t\t\t_optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\r\n\r\n\t\t\tif(_optional === true)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tverified: true,\r\n\t\t\t\t\tresult: root\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t//region Delete early added name of block\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t{\r\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\troot.error = \"Inconsistent object length\";\r\n\r\n\t\t\treturn {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tfor(let i = 0; i < maxLength; i++)\r\n\t\t{\r\n\t\t\t//region Special case when there is an \"optional\" element of ASN.1 schema at the end\r\n\t\t\tif((i - admission) >= inputData.valueBlock.value.length)\r\n\t\t\t{\r\n\t\t\t\tif(inputSchema.valueBlock.value[i].optional === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst _result = {\r\n\t\t\t\t\t\tverified: false,\r\n\t\t\t\t\t\tresult: root\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\troot.error = \"Inconsistent length between ASN.1 data and schema\";\r\n\r\n\t\t\t\t\t//region Delete early added name of block\r\n\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t\t\t_result.name = inputSchema.name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\treturn _result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//region Special case for Repeated type of ASN.1 schema element\r\n\t\t\t\tif(inputSchema.valueBlock.value[0] instanceof Repeated)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\r\n\t\t\t\t\tif(result.verified === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(inputSchema.valueBlock.value[0].optional === true)\r\n\t\t\t\t\t\t\tadmission++;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Delete early added name of block\r\n\t\t\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\t\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif((\"name\" in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet arrayRoot = {};\r\n\r\n\t\t\t\t\t\tif((\"local\" in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local === true))\r\n\t\t\t\t\t\t\tarrayRoot = inputData;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tarrayRoot = root;\r\n\r\n\t\t\t\t\t\tif(typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\r\n\t\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name] = [];\r\n\r\n\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\r\n\t\t\t\t\tif(result.verified === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(inputSchema.valueBlock.value[i].optional === true)\r\n\t\t\t\t\t\t\tadmission++;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Delete early added name of block\r\n\t\t\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\t\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(result.verified === false) // The situation may take place if last element is \"optional\" and verification failed\r\n\t\t{\r\n\t\t\tconst _result = {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\r\n\t\t\t//region Delete early added name of block\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t{\r\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t_result.name = inputSchema.name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn _result;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tverified: true,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region Ability to parse internal value for primitive-encoded value (value of OctetString, for example)\r\n\tif((\"primitiveSchema\" in inputSchema) &&\r\n\t\t(\"valueHex\" in inputData.valueBlock))\r\n\t{\r\n\t\t//region Decoding of raw ASN.1 data\r\n\t\tconst asn1 = fromBER(inputData.valueBlock.valueHex);\r\n\t\tif(asn1.offset === (-1))\r\n\t\t{\r\n\t\t\tconst _result = {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: asn1.result\r\n\t\t\t};\r\n\r\n\t\t\t//region Delete early added name of block\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t{\r\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t_result.name = inputSchema.name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn _result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn compareSchema(root, asn1.result, inputSchema.primitiveSchema);\r\n\t}\r\n\r\n\treturn {\r\n\t\tverified: true,\r\n\t\tresult: root\r\n\t};\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n//noinspection JSUnusedGlobalSymbols\r\n/**\r\n * ASN.1 schema verification for ArrayBuffer data\r\n * @param {!ArrayBuffer} inputBuffer Input BER-encoded ASN.1 data\r\n * @param {!Object} inputSchema Input ASN.1 schema to verify against to\r\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\r\n */\r\nexport function verifySchema(inputBuffer, inputSchema)\r\n{\r\n\t//region Initial check\r\n\tif((inputSchema instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema type\" }\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Decoding of raw ASN.1 data\r\n\tconst asn1 = fromBER(inputBuffer);\r\n\tif(asn1.offset === (-1))\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: asn1.result\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Compare ASN.1 struct with input schema\r\n\treturn compareSchema(asn1.result, asn1.result, inputSchema);\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Major function converting JSON to ASN.1 objects\r\n//**************************************************************************************\r\n//noinspection JSUnusedGlobalSymbols\r\n/**\r\n * Converting from JSON to ASN.1 objects\r\n * @param {string|Object} json JSON string or object to convert to ASN.1 objects\r\n */\r\nexport function fromJSON(json)\r\n{\r\n\t// TODO Implement\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************"]}